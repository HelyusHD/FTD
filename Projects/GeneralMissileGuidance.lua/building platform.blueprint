{"FileModelVersion":{"Major":1,"Minor":0},"Name":"building platform","Version":38,"SavedTotalBlockCount":2832,"SavedMaterialCost":205578.0,"ContainedMaterialCost":6090.0,"ItemDictionary":{"1476":"bcaf33a4-98c3-41d7-b416-438670e97d53","1452":"5548037e-8428-43f8-bcb6-d730dbcd0a79","1483":"d48733e2-f003-4643-86a2-cb350fd0dc04","416":"382a7650-2231-4867-96e4-8d97242a4741","1455":"db9ed060-d556-435b-945c-19c923e233d3","1480":"ee18a848-1319-4ff9-b5e5-3f3710635dbf","1468":"2f5f91c0-bebf-4de2-bf70-8d9bc1816997","627":"bf0db0d2-8582-41d2-bcfe-5299bec3d06b","1451":"e5d065f6-907b-450d-b998-213cdc54eec1","1479":"52a61c5e-07be-4bb9-9649-d3375c66e97e","1472":"6f820954-63e4-4bc9-a299-8266e712d838","1450":"0d554a9d-7d06-48b3-8aea-ffaeaa30380a","670":"ab699540-efc8-4592-bc97-204f6a874b3a","1445":"a7f5d8de-4882-4111-9d01-436493e5b2d8","1443":"2a22f176-01c2-42f2-a7d2-2c7054504aa9","608":"46fc87ec-0f7f-4c55-a5d3-721365c5f364","783":"d661f0e7-7f81-4227-80dd-f93aed873630","759":"c8fe583a-357b-4fa6-86f1-fc2de639c909","753":"56c27d46-39b3-4ac1-b4f7-71c118d8dde9","804":"e8d04f75-a134-452e-a04a-af5172d65040","834":"47da23fc-17bb-4a66-9c6d-fb66fddb3be6","816":"d5016f16-6431-4e8f-b0cc-5f0f400b151a","830":"a160804b-15cc-46e2-8ffb-401c2aa01de6","825":"33b65ccc-58a0-487d-8b68-a997a71b0bfe","790":"52e52d0c-02d7-4965-a46e-93462e083659","50":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","49":"f29b1372-f4f3-4305-aa85-5fe214361fb7","85":"10a165d1-1333-4c57-a942-b857542c4b45","815":"043e9b00-4a2f-41b8-bf2f-4aaa4442f138","836":"6209370e-abeb-4ec1-b523-dc21ea33fe0c","818":"515ee20d-20d8-4195-bea5-213e6f1fd929","837":"91cca4a9-a40f-43eb-9ba5-34c738b03d1f","1817":"4dd5c902-6c7c-4e9a-a970-31fb67f44dd4","1830":"fc52407e-bec1-441a-8828-68441c418deb","820":"4c24445d-a29b-446e-b03f-29e570e9d47d","817":"01a87958-93cf-4efa-857f-10913b0573d9","838":"542cacd4-c366-4a76-8d01-4ace6c5ce619","812":"819ef76e-1023-4f06-bfb1-96cd3e58ba88","833":"663d3348-9700-487e-a30e-f472d933e859","621":"d3924bae-be5a-43a0-be19-64fc7c8d6059","831":"c27e460b-f3c3-4716-b20a-69f766d27f34","4":"438b4494-6746-4223-93a1-3a75b08bd5b6","883":"e1d0c17b-9877-47a2-b5aa-d88db60781ca","72":"3ed4d2a4-62ce-4807-b516-6da685804e1e","51":"9d2ff3d6-abc2-4378-b47c-cad42d4af1bc","95":"2c557c38-4136-436a-bae2-c5cd1102690c","882":"ec96c0cd-ceb8-4d66-8002-c3914947ee9b","819":"ac5dda48-2bbf-453b-a4d5-517ae78499a1","14":"ae37018a-2b07-422c-b281-87f10fb95d3c","1444":"46f54639-5f91-4731-93eb-e5c0a7460538","821":"91d167b1-652f-4ac8-adc4-973b548ccd5d","46":"edd65760-896f-4f6a-ba8c-eb2b072635f4","100":"a56e0dcf-94e4-48a0-b8b9-5e33e0ab69cf","55":"57cd27b4-7876-41a7-8030-d5099d86bc0a","610":"1240b6db-1f41-442a-88ce-5ab0944d804b","616":"5b609887-c1dd-407b-b3b6-b1eb35d1e818","617":"20100af6-ccd1-41ff-b7b0-5d2f6bb99f85","612":"7e9abf0f-84a7-44e6-b4c3-e3da6f942072","582":"8d948200-242c-47c3-b46a-ecdf40f7b39b","605":"7fcfdaf0-2d2a-43be-842a-423e736ccdd0","646":"14930ee7-6795-44f4-ab26-a55a67e8ce01","361":"310a7a9a-8d4e-4365-a877-1a8e2bac2a81","360":"154e5001-729c-4a9f-983b-342d3092a0f3","390":"bfb82ee6-345a-44a4-84e1-d6706cc8b29d","386":"dc17bd30-20ac-47c3-9c42-af6b3cdebf6e","387":"b1ef236a-9ecb-406c-b4f0-6ef0fbb50bd1","615":"2e715d3f-349f-41e1-bd89-7f685939d5aa","409":"d30acc39-3742-47bd-82de-f5e1b9af565d","412":"74c982f4-305f-411e-a8b4-d193315ab3bc","701":"66c94e72-2465-4e98-9477-353ee614e654","1458":"b9d21957-633f-4926-9562-4cfab38badee","1453":"8477bbec-974c-45bf-a1ce-49a48d5b5307","1461":"2ddec223-13c2-4bf9-ba05-66338c51bd45","1430":"0358dee0-2d87-4b29-bb73-5c9e3399fd4e","1431":"de7aab07-7fec-438f-872a-d66b0e942b42","1459":"91183077-8eac-4e29-a197-9190429ef0ba","682":"4c3ab614-cc13-4028-a64b-554ffaba7d57","1454":"a09be1c6-93fd-4b54-b9ca-62e60efbc818","1462":"098917ec-d86a-4cee-9c65-7997295bc248","684":"7c979384-c633-475d-8a7c-008843f5640c","426":"c310aa38-b723-4a66-8700-47cffe7647f4","693":"1b664796-bb5c-40ee-9db7-6b517c1b28b6","690":"79d580ff-2dc2-42d5-b453-03acde0ef18c","702":"499e7ed2-204b-4e30-a266-ed42484ec8c5","678":"0cd861cc-cf38-4fd8-b02b-29140316cd45","696":"9b230797-737a-4ef8-a0e6-fb1a8d069a9a","699":"ffb331d2-8f72-4be6-b5e7-99053d71fe85","414":"05537cc1-9df6-4395-a3d4-1db6226c62b5","418":"cdca5dec-eeee-4849-9b2e-73b23e216465","417":"788700be-1e74-46d7-9e34-1a5ec2747548"},"Blueprint":{"ContainedMaterialCost":6090.0,"CSI":[100.0,244.0,-1.0,0.0,0.0,0.0,0.0,14870.053711,0.01614,0.0,0.0,0.0,0.0,601026.928874,120.25,1.0,1.0,0.0,1.0,3.0,10.0,-1.0,0.0,612000.0,1.0,1.0,3240000.0,0.0,0.0,0.0,2819.860107,0.0,0.1,0.1,1.0,1.0,3.0,43200.0,0.0,287914.875,0.0,-1.0,1.0,8.25,-1.0,0.0,0.0,0.0,3240000.0,3240000.0,0.0,1440.0,-1.0,7611.289551,654.0,0.0,216.0,0.0,500.0,0.0,12.0,0.0,0.0,0.0,14.595057,0.0,0.0,0.0,0.0,0.122468,0.0,0.0,0.0,0.0,1.0,1.0,112.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","1,0,0,0.5","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","1,0.921568,0.015686,0.99","0,1,1,0.99","1,0,1,0.99","0.776181,0.250549,0.602608,0.37598","0.588666,0.360367,0.363484,0.574841","0.718766,0.808711,0.934086,0.176686","0.740382,0.837589,0.524991,0.838706","0.955177,0.030904,0.247301,0.511478","0.272892,0.383582,0.839406,0.106914","0.834675,0.091411,0.51125,0.176899","0.159906,0.869002,0.177224,0.80322","0.92118,0.269222,0.612088,0.157932","0.063691,0.266288,0.017288,0.417696","0.781004,0.773164,0.854251,0.39059","0.049511,0.275559,0.164531,0.089726","0.715283,0.625686,0.720072,0.951533","0.929463,0.238687,0.803687,0.38828","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0.298039,0.1,0,0.83"],"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,1","0,0,4","1,0,4"],"BLR":[0,18,18,17],"BP1":null,"BP2":null,"BCI":[0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAADkAAgAAAAAAAAMAAAAAIAABAAAAACcAJIgAAAArAF0AAAAAKwBdGwEAACsA8wUdAbgeBb5QTEMgICAgICAgICAgICAgICAgICAgICBkAATNzMw9CQABAQAABEQDAAABAARQTEMy","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAABUAAAAAAAAAAAAAAABzJwAAAAAAZAAAAAAAAA==","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin  Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":417,"LocalPosition":"2,11,-1","LocalRotation":"-0.707106,-0.707106,0,0","ForceId":0,"TotalBlockCount":4,"MaxCords":"1,0,4","MinCords":"0,0,0","BlockIds":[418,1444,1452,1452],"BlockState":"0000","AliveCount":4,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.8.5.10","PersistentSubObjectIndex":167,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":4},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,1","0,0,4","1,0,4"],"BLR":[0,18,18,17],"BP1":null,"BP2":null,"BCI":[0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAADkAAgAAAAAAAAMAAAAAIAABAAAAACcAJIgAAAArAF0AAAAAKwBdGwEAACsA8wUdAbgeBb5QTEMgICAgICAgICAgICAgICAgICAgICBkAATNzMw9CQABAQAABEQDAAABAARQTEMx","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAABUAAAAAAAAAAAAAAABzJwAAAAAAZAAAAAAAAA==","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin  Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":417,"LocalPosition":"2,14,-1","LocalRotation":"0.707106,-0.707106,0,0","ForceId":0,"TotalBlockCount":4,"MaxCords":"1,0,4","MinCords":"0,0,0","BlockIds":[418,1444,1452,1452],"BlockState":"0000","AliveCount":4,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.8.5.10","PersistentSubObjectIndex":168,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":4},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,1","0,0,4","1,0,4"],"BLR":[0,18,18,17],"BP1":null,"BP2":null,"BCI":[0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAADkAAgAAAAAAAAMAAAAAIAABAAAAACcAJIgAAAArAF0AAAAAKwBdGwEAACsA8wUdAbgeBb5QTEMgICAgICAgICAgICAgICAgICAgICBkAATNzMw9CQABAQAABEQDAAABAARQTEMx","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAABUAAAAAAAAAAAAAAABzJwAAAAAAZAAAAAAAAA==","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin  Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":417,"LocalPosition":"-2,14,-1","LocalRotation":"0.707106,-0.707106,0,0","ForceId":0,"TotalBlockCount":4,"MaxCords":"1,0,4","MinCords":"0,0,0","BlockIds":[418,1444,1452,1452],"BlockState":"0000","AliveCount":4,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.8.5.10","PersistentSubObjectIndex":169,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":4},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,1","0,0,4","1,0,4"],"BLR":[0,18,18,17],"BP1":null,"BP2":null,"BCI":[0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAADkAAgAAAAAAAAMAAAAAIAABAAAAACcAJIgAAAArAF0AAAAAKwBdGwEAACsA8wUdAbgeBb5QTEMgICAgICAgICAgICAgICAgICAgICBkAATNzMw9CQABAQAABEQDAAABAARQTEMy","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAABUAAAAAAAAAAAAAAABzJwAAAAAAZAAAAAAAAA==","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin  Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":417,"LocalPosition":"-2,11,-1","LocalRotation":"0.707106,0.707106,0,0","ForceId":0,"TotalBlockCount":4,"MaxCords":"1,0,4","MinCords":"0,0,0","BlockIds":[418,1444,1452,1452],"BlockState":"0000","AliveCount":4,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.8.5.10","PersistentSubObjectIndex":170,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":4}],"BLP":["-1,11,-5","-1,12,-5","-1,13,-5","-1,14,-5","1,11,-5","1,12,-5","1,13,-5","1,14,-5","-2,1,-3","-2,2,-3","-2,3,-3","-2,4,-3","-2,5,-3","-2,6,-3","-2,7,-3","-2,8,-3","-2,9,-3","-2,10,-3","-1,12,-3","-1,13,-3","0,12,-3","0,13,-3","1,12,-3","1,13,-3","2,1,-3","2,2,-3","2,3,-3","2,4,-3","2,5,-3","2,6,-3","2,7,-3","2,8,-3","2,9,-3","2,10,-3","-3,11,-2","-3,12,-2","-3,13,-2","-3,14,-2","-2,1,-2","-2,2,-2","-2,3,-2","-2,4,-2","-2,5,-2","-2,6,-2","-2,7,-2","-2,8,-2","-2,9,-2","-2,10,-2","-1,11,-2","-1,14,-2","0,1,-2","0,2,-2","0,3,-2","0,4,-2","0,5,-2","0,6,-2","0,7,-2","0,8,-2","0,9,-2","0,10,-2","0,11,-2","0,14,-2","1,11,-2","1,14,-2","2,1,-2","2,2,-2","2,3,-2","2,4,-2","2,5,-2","2,6,-2","2,7,-2","2,8,-2","2,9,-2","2,10,-2","3,11,-2","3,12,-2","3,13,-2","3,14,-2","-3,14,-1","-2,12,-1","-1,12,-1","-1,13,-1","0,1,-1","0,2,-1","0,3,-1","0,4,-1","0,5,-1","0,6,-1","0,7,-1","0,8,-1","0,9,-1","0,10,-1","0,11,-1","2,12,-1","3,14,-1","-1,12,0","-1,13,0","0,0,0","0,1,0","0,2,0","0,3,0","0,4,0","0,5,0","0,6,0","0,7,0","0,8,0","0,9,0","0,10,0","0,11,0","0,12,0","0,13,0","1,12,0","1,13,0","0,1,1","0,2,1","0,3,1","0,4,1","0,5,1","0,6,1","0,7,1","0,8,1","0,9,1","0,10,1","0,13,1","-2,1,2","-2,2,2","-2,3,2","-2,4,2","-2,5,2","-2,6,2","-2,7,2","-2,8,2","-2,9,2","-2,10,2","0,1,2","0,2,2","0,3,2","0,4,2","0,5,2","0,6,2","0,7,2","0,8,2","0,9,2","0,10,2","2,1,2","2,2,2","2,3,2","2,4,2","2,5,2","2,6,2","2,7,2","2,8,2","2,9,2","2,10,2","-2,1,3","-2,2,3","-2,3,3","-2,4,3","-2,5,3","-2,6,3","-2,7,3","-2,8,3","-2,9,3","-2,10,3","0,12,3","0,14,3","2,1,3","2,2,3","2,3,3","2,4,3","2,5,3","2,6,3","2,7,3","2,8,3","2,9,3","2,10,3","0,12,5","0,13,5","0,14,5","0,12,7","0,14,7","0,12,9","0,13,9","0,14,9","0,12,11","0,14,11","0,13,13"],"BLR":[14,17,5,10,19,19,7,11,1,1,1,1,1,1,1,1,1,1,17,14,2,14,19,14,3,3,3,3,3,3,3,3,3,3,19,19,19,19,1,1,1,1,1,1,1,1,1,1,14,17,2,2,2,2,2,2,2,2,2,2,14,2,14,19,3,3,3,3,3,3,3,3,3,3,17,17,17,17,7,9,1,1,16,16,16,16,16,16,16,16,16,16,0,9,7,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,19,19,19,19,19,19,19,19,19,19,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,12,0,3,3,3,3,3,3,3,3,3,3,12,0,0,12,0,12,0,0,12,0,0],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"UgAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAUwAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAVAAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAVQAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAVgAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAVwAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAWAAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAWQAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAWgAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAWwAADgAAAAcAKwAAAAAAAF0bAQAABwAEAAQAAABAYQAAKgAAABgAAwAAAAAAAAEAAAAAAAACAAAAAAAAdiYAAAAHAEIYAAAABwBdGwEAAAcAAQAECtcjPAAABEIDAAABAAdncm91cDAxbgAAKgAAADEARwAAAAAAAAEAAAAADgACAAAAAA4AdiYAAAAVAEIYAAAAFQBdGwEAACoAAgAEAADwQwQABMYJAAABAATNzMw9AAAElPE0RwEABNVn8kQCAASA7F1KAAAEAgAAAHEAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHIAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHMAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHQAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHUAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHYAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHcAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHgAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHkAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQHoAAA4AAAAHACsAAAAAAABdGwEAAAcABAAEAAAAQA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAABUAAAAAAAAAAAAAAABzJwAAAAAAZAAAAAAAAA==","designChanged":false,"blueprintVersion":0,"blueprintName":"One Axis Turret 3m","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":414,"LocalPosition":"10,8,-31","LocalRotation":"0,-0.707106,0,0.707106","ForceId":0,"TotalBlockCount":203,"MaxCords":"3,14,13","MinCords":"-3,0,-5","BlockIds":[1476,1476,1476,1476,1476,1480,1480,1476,701,701,701,701,701,701,701,701,701,701,1458,1458,1453,1453,1461,1461,701,701,701,701,701,701,701,701,701,701,1430,1431,1430,1431,701,701,701,701,701,701,701,701,701,701,1459,1459,682,682,682,682,682,682,682,682,682,682,1454,1454,1462,1462,701,701,701,701,701,701,701,701,701,701,1431,1430,1431,1430,1445,1443,1444,1444,684,684,684,684,684,684,684,684,684,684,670,1443,1445,1444,1444,426,693,693,693,693,693,693,693,693,693,693,690,690,702,1444,1444,684,684,684,684,684,684,684,684,684,684,678,701,701,701,701,701,701,701,701,701,701,682,682,682,682,682,682,682,682,682,682,701,701,701,701,701,701,701,701,701,701,701,701,701,701,701,701,701,701,701,701,696,696,701,701,701,701,701,701,701,701,701,701,696,678,696,696,696,696,678,696,696,696,699],"BlockState":"=0,187","AliveCount":187,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.8.5.10","PersistentSubObjectIndex":166,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":187}],"BLP":["-1,0,-43","-1,1,-43","-1,2,-43","0,1,-43","0,2,-43","1,0,-43","1,1,-43","1,2,-43","2,5,-43","2,6,-43","3,5,-43","3,6,-43","4,6,-43","5,6,-43","6,6,-43","7,5,-43","7,6,-43","8,6,-43","9,6,-43","10,6,-43","11,5,-43","11,6,-43","12,6,-43","13,6,-43","14,6,-43","15,5,-43","15,6,-43","16,6,-43","17,6,-43","18,6,-43","19,5,-43","19,6,-43","20,0,-43","20,1,-43","20,2,-43","21,1,-43","21,2,-43","22,0,-43","22,1,-43","22,2,-43","23,5,-43","23,6,-43","24,6,-43","25,6,-43","26,6,-43","27,5,-43","27,6,-43","28,6,-43","29,6,-43","30,6,-43","31,5,-43","31,6,-43","32,6,-43","33,6,-43","34,6,-43","35,5,-43","35,6,-43","36,6,-43","37,6,-43","38,6,-43","39,5,-43","39,6,-43","40,5,-43","40,6,-43","41,0,-43","41,1,-43","41,2,-43","42,1,-43","42,2,-43","43,0,-43","43,1,-43","43,2,-43","-1,1,-42","-1,2,-42","0,0,-42","0,1,-42","0,2,-42","0,3,-42","0,7,-42","1,1,-42","1,3,-42","2,3,-42","3,3,-42","4,2,-42","4,3,-42","4,7,-42","5,3,-42","6,3,-42","7,3,-42","8,2,-42","8,3,-42","8,7,-42","9,3,-42","9,7,-42","10,3,-42","10,7,-42","11,3,-42","12,2,-42","12,3,-42","12,7,-42","13,3,-42","14,3,-42","15,3,-42","16,2,-42","16,3,-42","16,7,-42","17,3,-42","18,3,-42","19,3,-42","20,1,-42","20,2,-42","20,3,-42","20,7,-42","21,0,-42","21,1,-42","21,2,-42","21,3,-42","21,7,-42","22,1,-42","22,2,-42","22,3,-42","23,3,-42","24,3,-42","25,3,-42","25,7,-42","26,2,-42","26,3,-42","27,3,-42","28,3,-42","29,3,-42","29,7,-42","30,2,-42","30,3,-42","30,7,-42","31,3,-42","32,3,-42","32,7,-42","33,3,-42","33,7,-42","34,2,-42","34,3,-42","35,3,-42","36,3,-42","37,3,-42","37,7,-42","38,2,-42","38,3,-42","39,3,-42","40,3,-42","41,1,-42","41,3,-42","41,7,-42","42,0,-42","42,1,-42","42,2,-42","42,3,-42","42,7,-42","43,1,-42","43,2,-42","-1,0,-41","-1,1,-41","-1,2,-41","0,1,-41","0,3,-41","1,0,-41","1,1,-41","1,3,-41","1,7,-41","2,3,-41","2,7,-41","3,3,-41","3,7,-41","4,3,-41","4,7,-41","5,3,-41","5,7,-41","6,7,-41","7,7,-41","8,7,-41","9,7,-41","10,3,-41","10,7,-41","11,3,-41","11,7,-41","12,3,-41","12,7,-41","13,3,-41","13,7,-41","14,3,-41","14,7,-41","15,7,-41","16,4,-41","16,7,-41","17,7,-41","18,7,-41","19,4,-41","19,7,-41","20,0,-41","20,1,-41","20,7,-41","21,1,-41","21,3,-41","22,0,-41","22,1,-41","22,7,-41","23,4,-41","23,7,-41","24,7,-41","25,7,-41","26,4,-41","26,7,-41","27,7,-41","28,3,-41","28,7,-41","29,3,-41","29,7,-41","30,3,-41","30,7,-41","31,3,-41","31,7,-41","32,3,-41","32,7,-41","33,7,-41","34,7,-41","35,7,-41","36,7,-41","37,3,-41","37,7,-41","38,3,-41","38,7,-41","39,3,-41","39,7,-41","40,3,-41","40,7,-41","41,0,-41","41,1,-41","41,3,-41","41,7,-41","42,1,-41","42,3,-41","42,7,-41","43,0,-41","43,1,-41","43,2,-41","-1,5,-40","-1,6,-40","0,3,-40","1,3,-40","2,3,-40","3,3,-40","4,3,-40","5,3,-40","10,3,-40","11,3,-40","12,3,-40","13,3,-40","14,3,-40","21,3,-40","28,3,-40","29,3,-40","30,3,-40","31,3,-40","32,3,-40","37,3,-40","38,3,-40","39,3,-40","40,3,-40","41,3,-40","42,3,-40","43,5,-40","43,6,-40","-1,5,-39","-1,6,-39","0,3,-39","1,3,-39","2,3,-39","3,3,-39","4,3,-39","5,3,-39","10,3,-39","11,3,-39","12,3,-39","13,3,-39","14,3,-39","16,3,-39","16,4,-39","16,5,-39","19,3,-39","19,4,-39","19,5,-39","21,3,-39","23,3,-39","23,4,-39","23,5,-39","26,3,-39","26,4,-39","26,5,-39","28,3,-39","29,3,-39","30,3,-39","31,3,-39","32,3,-39","37,3,-39","38,3,-39","39,3,-39","40,3,-39","41,3,-39","42,3,-39","43,5,-39","43,6,-39","-1,6,-38","0,2,-38","0,3,-38","0,7,-38","1,2,-38","1,3,-38","2,2,-38","2,3,-38","3,2,-38","3,3,-38","4,2,-38","4,3,-38","5,2,-38","5,3,-38","6,2,-38","7,2,-38","8,2,-38","9,2,-38","10,2,-38","10,3,-38","11,2,-38","11,3,-38","12,2,-38","12,3,-38","13,2,-38","13,3,-38","14,2,-38","14,3,-38","15,2,-38","16,2,-38","17,2,-38","18,2,-38","19,2,-38","20,2,-38","21,2,-38","21,3,-38","21,7,-38","22,2,-38","23,2,-38","24,2,-38","25,2,-38","26,2,-38","27,2,-38","28,2,-38","28,3,-38","29,2,-38","29,3,-38","30,2,-38","30,3,-38","31,2,-38","31,3,-38","32,2,-38","32,3,-38","33,2,-38","34,2,-38","35,2,-38","36,2,-38","37,2,-38","37,3,-38","38,2,-38","38,3,-38","39,2,-38","39,3,-38","40,2,-38","40,3,-38","41,2,-38","41,3,-38","42,2,-38","42,3,-38","43,6,-38","-1,6,-37","0,3,-37","1,3,-37","1,7,-37","2,3,-37","2,7,-37","3,3,-37","3,7,-37","4,3,-37","4,7,-37","5,3,-37","5,7,-37","6,7,-37","7,7,-37","8,7,-37","9,7,-37","10,3,-37","10,7,-37","11,3,-37","11,7,-37","12,3,-37","12,7,-37","13,3,-37","13,7,-37","14,3,-37","14,7,-37","15,7,-37","16,7,-37","17,7,-37","18,7,-37","19,7,-37","20,7,-37","21,3,-37","22,7,-37","23,7,-37","24,7,-37","25,7,-37","26,7,-37","27,7,-37","28,3,-37","28,7,-37","29,3,-37","29,7,-37","30,3,-37","30,7,-37","31,3,-37","31,7,-37","32,3,-37","32,7,-37","33,7,-37","34,7,-37","35,7,-37","36,7,-37","37,3,-37","37,7,-37","38,3,-37","38,7,-37","39,3,-37","39,7,-37","40,3,-37","40,7,-37","41,3,-37","41,7,-37","42,3,-37","42,7,-37","43,6,-37","-1,6,-36","0,3,-36","14,3,-36","16,3,-36","16,4,-36","16,5,-36","19,3,-36","19,4,-36","19,5,-36","21,3,-36","23,3,-36","23,4,-36","23,5,-36","26,3,-36","26,4,-36","26,5,-36","28,3,-36","42,3,-36","43,6,-36","-1,5,-35","-1,6,-35","0,3,-35","21,3,-35","42,3,-35","43,5,-35","43,6,-35","-1,6,-34","0,2,-34","0,3,-34","0,7,-34","1,2,-34","2,2,-34","3,2,-34","4,2,-34","5,2,-34","6,2,-34","7,2,-34","8,2,-34","9,2,-34","10,2,-34","11,2,-34","12,2,-34","13,2,-34","14,2,-34","15,2,-34","16,2,-34","17,2,-34","18,2,-34","19,2,-34","20,2,-34","21,2,-34","21,3,-34","21,7,-34","22,2,-34","23,2,-34","24,2,-34","25,2,-34","26,2,-34","27,2,-34","28,2,-34","29,2,-34","30,2,-34","31,2,-34","32,2,-34","33,2,-34","34,2,-34","35,2,-34","36,2,-34","37,2,-34","38,2,-34","39,2,-34","40,2,-34","41,2,-34","42,2,-34","42,3,-34","43,6,-34","-1,6,-33","0,3,-33","0,7,-33","1,7,-33","2,7,-33","3,7,-33","4,7,-33","5,7,-33","6,7,-33","7,7,-33","8,7,-33","9,7,-33","11,7,-33","13,7,-33","14,7,-33","15,7,-33","16,3,-33","16,7,-33","17,7,-33","18,7,-33","19,3,-33","19,7,-33","20,7,-33","21,3,-33","21,7,-33","22,7,-33","23,3,-33","23,7,-33","24,7,-33","25,7,-33","26,3,-33","26,7,-33","27,7,-33","28,7,-33","29,7,-33","31,7,-33","33,7,-33","35,7,-33","36,7,-33","37,7,-33","38,7,-33","39,7,-33","40,7,-33","41,7,-33","42,3,-33","42,7,-33","43,6,-33","-1,6,-32","0,3,-32","0,7,-32","11,7,-32","21,3,-32","31,7,-32","42,3,-32","42,7,-32","43,6,-32","-1,5,-31","-1,6,-31","0,3,-31","6,4,-31","7,3,-31","8,3,-31","8,4,-31","9,3,-31","10,3,-31","10,4,-31","11,3,-31","11,7,-31","12,3,-31","12,4,-31","13,3,-31","15,3,-31","15,4,-31","15,5,-31","17,3,-31","17,4,-31","17,5,-31","19,3,-31","19,4,-31","19,5,-31","21,3,-31","21,7,-31","23,3,-31","23,4,-31","23,5,-31","25,3,-31","25,4,-31","25,5,-31","26,8,-31","26,9,-31","26,10,-31","26,11,-31","26,12,-31","26,13,-31","26,14,-31","26,15,-31","26,16,-31","26,17,-31","26,18,-31","26,19,-31","26,20,-31","27,3,-31","27,4,-31","27,5,-31","29,3,-31","30,3,-31","30,4,-31","31,3,-31","31,7,-31","32,3,-31","32,4,-31","33,3,-31","34,3,-31","34,4,-31","35,3,-31","36,4,-31","42,3,-31","43,5,-31","43,6,-31","-1,6,-30","0,2,-30","0,3,-30","0,7,-30","1,2,-30","2,2,-30","3,2,-30","4,2,-30","5,2,-30","5,4,-30","6,2,-30","6,4,-30","7,2,-30","7,3,-30","7,4,-30","8,2,-30","8,4,-30","9,2,-30","9,3,-30","9,4,-30","10,2,-30","10,4,-30","11,2,-30","11,3,-30","11,4,-30","11,7,-30","12,2,-30","12,4,-30","12,7,-30","13,2,-30","13,3,-30","13,4,-30","14,2,-30","15,2,-30","16,2,-30","17,2,-30","18,2,-30","19,2,-30","20,2,-30","21,2,-30","21,3,-30","21,7,-30","22,2,-30","23,2,-30","24,2,-30","25,2,-30","26,2,-30","27,2,-30","28,2,-30","29,2,-30","29,3,-30","29,4,-30","30,2,-30","30,4,-30","30,7,-30","31,2,-30","31,3,-30","31,4,-30","31,7,-30","32,2,-30","32,4,-30","33,2,-30","33,3,-30","33,4,-30","34,2,-30","34,4,-30","34,7,-30","35,2,-30","35,3,-30","35,4,-30","36,2,-30","36,4,-30","37,2,-30","37,4,-30","38,2,-30","39,2,-30","40,2,-30","41,2,-30","42,2,-30","42,3,-30","42,7,-30","43,6,-30","-1,6,-29","0,3,-29","1,7,-29","2,7,-29","3,7,-29","4,7,-29","5,4,-29","5,7,-29","6,3,-29","6,4,-29","6,5,-29","6,7,-29","7,3,-29","7,4,-29","7,5,-29","7,7,-29","8,3,-29","8,4,-29","8,5,-29","8,7,-29","9,3,-29","9,4,-29","9,5,-29","9,7,-29","10,3,-29","10,4,-29","10,5,-29","10,7,-29","11,3,-29","11,4,-29","11,5,-29","11,7,-29","12,3,-29","12,4,-29","12,5,-29","12,7,-29","13,3,-29","13,4,-29","13,5,-29","13,7,-29","14,7,-29","15,3,-29","15,4,-29","15,5,-29","15,7,-29","16,7,-29","17,3,-29","17,4,-29","17,5,-29","17,7,-29","18,7,-29","19,3,-29","19,4,-29","19,5,-29","19,7,-29","20,7,-29","21,3,-29","22,7,-29","23,3,-29","23,4,-29","23,5,-29","23,7,-29","24,7,-29","25,3,-29","25,4,-29","25,5,-29","25,7,-29","26,7,-29","27,3,-29","27,4,-29","27,5,-29","27,7,-29","28,7,-29","29,3,-29","29,4,-29","29,5,-29","29,7,-29","30,3,-29","30,4,-29","30,5,-29","30,7,-29","31,3,-29","31,4,-29","31,5,-29","31,7,-29","32,3,-29","32,4,-29","32,5,-29","32,7,-29","33,3,-29","33,4,-29","33,5,-29","33,7,-29","34,3,-29","34,4,-29","34,5,-29","34,7,-29","35,3,-29","35,4,-29","35,5,-29","35,7,-29","36,3,-29","36,4,-29","36,5,-29","36,7,-29","37,4,-29","37,7,-29","38,7,-29","39,7,-29","40,7,-29","41,7,-29","42,3,-29","42,7,-29","43,6,-29","-1,6,-28","0,3,-28","5,3,-28","5,4,-28","6,4,-28","7,4,-28","7,5,-28","8,4,-28","8,5,-28","9,3,-28","9,4,-28","9,5,-28","10,4,-28","10,5,-28","11,4,-28","11,5,-28","12,4,-28","12,5,-28","13,3,-28","13,4,-28","13,5,-28","13,6,-28","21,3,-28","29,3,-28","29,4,-28","29,5,-28","29,6,-28","30,4,-28","30,5,-28","31,4,-28","31,5,-28","32,4,-28","32,5,-28","33,3,-28","33,4,-28","33,5,-28","34,4,-28","34,5,-28","35,4,-28","35,5,-28","36,4,-28","37,3,-28","37,4,-28","42,3,-28","43,6,-28","-1,5,-27","-1,6,-27","0,3,-27","5,4,-27","6,3,-27","6,4,-27","6,5,-27","7,3,-27","7,4,-27","7,5,-27","8,3,-27","8,4,-27","8,5,-27","9,3,-27","9,4,-27","9,5,-27","10,3,-27","10,4,-27","10,5,-27","11,3,-27","11,4,-27","11,5,-27","12,3,-27","12,4,-27","12,5,-27","13,3,-27","13,4,-27","13,5,-27","13,6,-27","15,3,-27","15,4,-27","15,5,-27","17,3,-27","17,4,-27","17,5,-27","19,3,-27","19,4,-27","19,5,-27","21,3,-27","23,3,-27","23,4,-27","23,5,-27","25,3,-27","25,4,-27","25,5,-27","27,3,-27","27,4,-27","27,5,-27","29,3,-27","29,4,-27","29,5,-27","29,6,-27","30,3,-27","30,4,-27","30,5,-27","31,3,-27","31,4,-27","31,5,-27","32,3,-27","32,4,-27","32,5,-27","33,3,-27","33,4,-27","33,5,-27","34,3,-27","34,4,-27","34,5,-27","35,3,-27","35,4,-27","35,5,-27","36,3,-27","36,4,-27","36,5,-27","37,4,-27","42,3,-27","43,5,-27","43,6,-27","-1,6,-26","0,2,-26","0,3,-26","0,7,-26","1,2,-26","2,2,-26","3,2,-26","4,2,-26","5,2,-26","5,4,-26","6,2,-26","6,4,-26","7,2,-26","7,3,-26","7,4,-26","8,2,-26","8,4,-26","9,2,-26","9,3,-26","9,4,-26","10,2,-26","10,4,-26","11,2,-26","11,3,-26","11,4,-26","12,2,-26","12,4,-26","13,2,-26","13,3,-26","13,4,-26","14,2,-26","15,2,-26","16,2,-26","17,2,-26","18,2,-26","19,2,-26","20,2,-26","21,2,-26","21,3,-26","21,7,-26","22,2,-26","23,2,-26","24,2,-26","25,2,-26","26,2,-26","27,2,-26","28,2,-26","29,2,-26","29,3,-26","29,4,-26","30,2,-26","30,4,-26","31,2,-26","31,3,-26","31,4,-26","32,2,-26","32,4,-26","33,2,-26","33,3,-26","33,4,-26","34,2,-26","34,4,-26","35,2,-26","35,3,-26","35,4,-26","36,2,-26","36,4,-26","37,2,-26","37,4,-26","38,2,-26","39,2,-26","40,2,-26","41,2,-26","42,2,-26","42,3,-26","43,6,-26","-1,6,-25","0,3,-25","1,7,-25","2,7,-25","3,7,-25","4,7,-25","5,7,-25","6,4,-25","6,7,-25","7,3,-25","7,7,-25","8,3,-25","8,4,-25","8,7,-25","9,3,-25","9,7,-25","10,3,-25","10,4,-25","10,7,-25","11,3,-25","11,7,-25","12,3,-25","12,4,-25","12,7,-25","13,3,-25","13,7,-25","14,7,-25","15,3,-25","15,4,-25","15,5,-25","15,7,-25","16,7,-25","17,3,-25","17,4,-25","17,5,-25","17,7,-25","18,7,-25","19,3,-25","19,4,-25","19,5,-25","19,7,-25","20,7,-25","21,3,-25","22,7,-25","23,3,-25","23,4,-25","23,5,-25","23,7,-25","24,7,-25","25,3,-25","25,4,-25","25,5,-25","25,7,-25","26,7,-25","27,3,-25","27,4,-25","27,5,-25","27,7,-25","28,7,-25","29,3,-25","29,7,-25","30,3,-25","30,4,-25","30,7,-25","30,8,-25","31,3,-25","31,7,-25","32,3,-25","32,4,-25","32,7,-25","33,3,-25","33,7,-25","34,3,-25","34,4,-25","35,3,-25","35,7,-25","36,4,-25","36,7,-25","37,7,-25","38,7,-25","39,7,-25","40,7,-25","41,7,-25","42,3,-25","42,7,-25","43,6,-25","-1,6,-24","0,3,-24","21,3,-24","42,3,-24","43,6,-24","-1,5,-23","-1,6,-23","0,3,-23","13,6,-23","18,3,-23","21,3,-23","24,3,-23","29,6,-23","42,3,-23","43,5,-23","43,6,-23","-1,0,-22","-1,1,-22","-1,2,-22","-1,6,-22","0,1,-22","0,2,-22","0,3,-22","0,7,-22","1,0,-22","1,1,-22","1,2,-22","2,2,-22","2,3,-22","3,2,-22","3,3,-22","4,2,-22","4,3,-22","5,2,-22","5,3,-22","6,2,-22","6,3,-22","7,2,-22","7,3,-22","8,2,-22","8,3,-22","9,2,-22","9,3,-22","10,2,-22","10,3,-22","11,2,-22","11,3,-22","12,2,-22","12,3,-22","13,2,-22","13,3,-22","14,2,-22","14,3,-22","15,2,-22","16,2,-22","17,2,-22","18,2,-22","19,2,-22","20,0,-22","20,1,-22","20,2,-22","21,1,-22","21,2,-22","21,3,-22","21,7,-22","22,0,-22","22,1,-22","22,2,-22","23,2,-22","24,2,-22","25,2,-22","26,2,-22","27,2,-22","28,2,-22","28,3,-22","29,2,-22","29,3,-22","30,2,-22","30,3,-22","31,2,-22","31,3,-22","32,2,-22","32,3,-22","33,2,-22","33,3,-22","34,2,-22","34,3,-22","35,2,-22","35,3,-22","36,2,-22","36,3,-22","37,2,-22","37,3,-22","38,2,-22","38,3,-22","39,2,-22","39,3,-22","40,2,-22","40,3,-22","41,0,-22","41,1,-22","41,2,-22","42,1,-22","42,2,-22","42,3,-22","43,0,-22","43,1,-22","43,2,-22","43,6,-22","-1,1,-21","-1,2,-21","-1,6,-21","-1,7,-21","0,0,-21","0,1,-21","0,2,-21","0,3,-21","0,6,-21","0,7,-21","1,1,-21","1,2,-21","1,3,-21","2,3,-21","2,4,-21","3,3,-21","3,4,-21","4,3,-21","4,4,-21","4,6,-21","4,7,-21","5,2,-21","5,3,-21","5,4,-21","6,3,-21","6,4,-21","7,3,-21","7,4,-21","8,3,-21","8,4,-21","8,6,-21","8,7,-21","9,2,-21","9,3,-21","9,4,-21","9,7,-21","10,3,-21","10,4,-21","10,7,-21","11,3,-21","11,4,-21","12,3,-21","12,4,-21","12,6,-21","12,7,-21","13,2,-21","13,3,-21","13,4,-21","13,6,-21","14,3,-21","14,4,-21","15,3,-21","16,7,-21","17,2,-21","20,1,-21","20,7,-21","21,0,-21","21,1,-21","21,2,-21","21,3,-21","21,7,-21","22,1,-21","22,2,-21","25,7,-21","26,2,-21","27,3,-21","28,3,-21","28,4,-21","29,3,-21","29,4,-21","29,6,-21","29,7,-21","30,2,-21","30,3,-21","30,4,-21","30,6,-21","30,7,-21","31,3,-21","31,4,-21","32,3,-21","32,4,-21","32,7,-21","33,3,-21","33,4,-21","33,7,-21","34,2,-21","34,3,-21","34,4,-21","34,6,-21","35,3,-21","35,4,-21","36,3,-21","36,4,-21","37,3,-21","37,4,-21","37,7,-21","38,2,-21","38,3,-21","38,4,-21","38,6,-21","39,3,-21","39,4,-21","40,3,-21","40,4,-21","41,1,-21","41,3,-21","41,7,-21","42,0,-21","42,1,-21","42,2,-21","42,3,-21","42,6,-21","42,7,-21","43,1,-21","43,2,-21","43,6,-21","43,7,-21","-1,0,-20","-1,1,-20","-1,2,-20","-1,6,-20","0,1,-20","0,3,-20","1,0,-20","1,1,-20","1,7,-20","2,3,-20","2,7,-20","3,3,-20","3,7,-20","4,3,-20","4,7,-20","5,3,-20","5,7,-20","6,3,-20","6,7,-20","7,3,-20","7,7,-20","8,3,-20","8,7,-20","9,3,-20","9,7,-20","10,3,-20","10,7,-20","11,3,-20","11,7,-20","12,3,-20","12,7,-20","13,3,-20","13,7,-20","14,3,-20","14,7,-20","15,7,-20","16,7,-20","17,7,-20","18,7,-20","19,7,-20","20,0,-20","20,1,-20","20,7,-20","21,1,-20","21,2,-20","21,3,-20","21,7,-20","22,0,-20","22,1,-20","22,7,-20","23,7,-20","24,7,-20","25,7,-20","26,7,-20","27,7,-20","28,3,-20","28,7,-20","29,3,-20","29,7,-20","30,3,-20","30,7,-20","31,3,-20","31,7,-20","32,3,-20","32,7,-20","33,3,-20","33,7,-20","34,3,-20","34,7,-20","35,3,-20","35,7,-20","36,3,-20","36,7,-20","37,3,-20","37,7,-20","38,3,-20","38,7,-20","39,3,-20","39,7,-20","40,3,-20","40,7,-20","41,0,-20","41,1,-20","41,7,-20","42,1,-20","42,3,-20","42,7,-20","43,0,-20","43,1,-20","43,2,-20","43,6,-20","-1,5,-19","-1,6,-19","0,3,-19","13,6,-19","18,3,-19","21,3,-19","24,3,-19","29,6,-19","42,3,-19","43,5,-19","43,6,-19","-1,5,-18","-1,6,-18","0,3,-18","21,3,-18","42,3,-18","43,5,-18","43,6,-18","-1,6,-17","0,2,-17","0,3,-17","0,7,-17","1,2,-17","2,2,-17","3,2,-17","4,2,-17","5,2,-17","6,2,-17","6,4,-17","7,2,-17","7,3,-17","8,2,-17","8,3,-17","8,4,-17","9,2,-17","9,3,-17","10,2,-17","10,3,-17","10,4,-17","11,2,-17","11,3,-17","12,2,-17","12,3,-17","12,4,-17","13,2,-17","13,3,-17","14,2,-17","15,2,-17","16,2,-17","16,3,-17","16,4,-17","16,5,-17","17,2,-17","18,2,-17","18,3,-17","18,4,-17","18,5,-17","19,2,-17","20,2,-17","20,4,-17","20,5,-17","21,3,-17","22,2,-17","22,4,-17","22,5,-17","23,2,-17","24,2,-17","24,3,-17","24,4,-17","24,5,-17","25,2,-17","26,2,-17","26,3,-17","26,4,-17","26,5,-17","27,2,-17","28,2,-17","29,2,-17","29,3,-17","30,2,-17","30,3,-17","30,4,-17","31,2,-17","31,3,-17","32,2,-17","32,3,-17","32,4,-17","33,2,-17","33,3,-17","34,2,-17","34,3,-17","34,4,-17","35,2,-17","35,3,-17","36,2,-17","36,4,-17","37,2,-17","38,2,-17","39,2,-17","40,2,-17","41,2,-17","42,2,-17","42,3,-17","43,6,-17","-1,6,-16","0,3,-16","1,7,-16","2,7,-16","3,7,-16","4,7,-16","5,4,-16","5,7,-16","6,4,-16","6,7,-16","7,3,-16","7,4,-16","7,7,-16","8,4,-16","8,7,-16","9,3,-16","9,4,-16","9,7,-16","10,4,-16","10,7,-16","11,3,-16","11,4,-16","11,7,-16","12,4,-16","12,7,-16","13,3,-16","13,4,-16","13,7,-16","14,7,-16","15,7,-16","16,7,-16","17,7,-16","18,7,-16","19,3,-16","19,7,-16","20,7,-16","21,2,-16","21,3,-16","21,7,-16","22,7,-16","23,3,-16","23,7,-16","24,7,-16","25,7,-16","26,7,-16","27,7,-16","28,7,-16","29,3,-16","29,4,-16","29,7,-16","30,4,-16","30,7,-16","31,3,-16","31,4,-16","31,7,-16","32,4,-16","32,7,-16","33,3,-16","33,4,-16","33,7,-16","34,4,-16","34,7,-16","35,3,-16","35,4,-16","35,7,-16","36,4,-16","36,7,-16","37,4,-16","37,7,-16","38,7,-16","39,7,-16","40,7,-16","41,7,-16","42,3,-16","42,7,-16","43,6,-16","-1,6,-15","0,3,-15","5,4,-15","6,3,-15","6,4,-15","6,5,-15","7,3,-15","7,4,-15","7,5,-15","8,3,-15","8,4,-15","8,5,-15","8,7,-15","9,3,-15","9,4,-15","9,5,-15","10,3,-15","10,4,-15","10,5,-15","11,3,-15","11,4,-15","11,5,-15","12,3,-15","12,4,-15","12,5,-15","13,3,-15","13,4,-15","13,5,-15","13,6,-15","16,3,-15","16,4,-15","16,5,-15","18,3,-15","18,4,-15","18,5,-15","20,4,-15","20,5,-15","21,3,-15","22,4,-15","22,5,-15","24,3,-15","24,4,-15","24,5,-15","26,3,-15","26,4,-15","26,5,-15","29,3,-15","29,4,-15","29,5,-15","29,6,-15","30,3,-15","30,4,-15","30,5,-15","31,3,-15","31,4,-15","31,5,-15","32,3,-15","32,4,-15","32,5,-15","33,3,-15","33,4,-15","33,5,-15","34,3,-15","34,4,-15","34,5,-15","35,3,-15","35,4,-15","35,5,-15","36,3,-15","36,4,-15","36,5,-15","37,4,-15","42,3,-15","43,6,-15","-1,5,-14","-1,6,-14","0,3,-14","5,3,-14","5,4,-14","6,4,-14","7,4,-14","7,5,-14","8,4,-14","8,5,-14","9,3,-14","9,4,-14","9,5,-14","10,4,-14","10,5,-14","11,4,-14","11,5,-14","12,4,-14","12,5,-14","13,3,-14","13,4,-14","13,5,-14","13,6,-14","19,3,-14","21,6,-14","23,3,-14","29,3,-14","29,4,-14","29,5,-14","29,6,-14","30,4,-14","30,5,-14","31,4,-14","31,5,-14","32,4,-14","32,5,-14","33,3,-14","33,4,-14","33,5,-14","34,4,-14","34,5,-14","35,4,-14","35,5,-14","36,4,-14","37,3,-14","37,4,-14","42,3,-14","43,5,-14","43,6,-14","-1,6,-13","0,2,-13","0,3,-13","0,7,-13","1,2,-13","2,2,-13","3,2,-13","4,2,-13","5,2,-13","5,4,-13","6,2,-13","6,3,-13","6,4,-13","6,5,-13","7,2,-13","7,3,-13","7,4,-13","7,5,-13","8,2,-13","8,3,-13","8,4,-13","8,5,-13","9,2,-13","9,3,-13","9,4,-13","9,5,-13","10,2,-13","10,3,-13","10,4,-13","10,5,-13","11,2,-13","11,3,-13","11,4,-13","11,5,-13","12,2,-13","12,3,-13","12,4,-13","12,5,-13","13,2,-13","13,3,-13","13,4,-13","13,5,-13","14,2,-13","15,2,-13","16,2,-13","16,3,-13","16,4,-13","16,5,-13","17,2,-13","18,2,-13","18,3,-13","18,4,-13","18,5,-13","19,2,-13","20,2,-13","20,4,-13","20,5,-13","21,3,-13","22,2,-13","22,4,-13","22,5,-13","23,2,-13","24,2,-13","24,3,-13","24,4,-13","24,5,-13","25,2,-13","26,2,-13","26,3,-13","26,4,-13","26,5,-13","27,2,-13","28,2,-13","29,2,-13","29,3,-13","29,4,-13","29,5,-13","30,2,-13","30,3,-13","30,4,-13","30,5,-13","31,2,-13","31,3,-13","31,4,-13","31,5,-13","32,2,-13","32,3,-13","32,4,-13","32,5,-13","33,2,-13","33,3,-13","33,4,-13","33,5,-13","34,2,-13","34,3,-13","34,4,-13","34,5,-13","35,2,-13","35,3,-13","35,4,-13","35,5,-13","36,2,-13","36,3,-13","36,4,-13","36,5,-13","37,2,-13","37,4,-13","38,2,-13","39,2,-13","40,2,-13","41,2,-13","42,2,-13","42,3,-13","43,6,-13","-1,6,-12","0,3,-12","0,7,-12","1,7,-12","2,7,-12","3,7,-12","4,7,-12","5,4,-12","5,7,-12","6,4,-12","6,7,-12","7,3,-12","7,4,-12","7,7,-12","8,4,-12","9,3,-12","9,4,-12","9,7,-12","10,4,-12","11,3,-12","11,4,-12","11,7,-12","12,4,-12","12,7,-12","13,3,-12","13,4,-12","13,7,-12","14,7,-12","15,7,-12","16,7,-12","17,7,-12","18,7,-12","19,3,-12","19,7,-12","21,2,-12","21,3,-12","21,7,-12","23,3,-12","23,7,-12","24,7,-12","25,7,-12","26,7,-12","27,7,-12","28,7,-12","29,3,-12","29,4,-12","29,7,-12","30,4,-12","30,7,-12","31,3,-12","31,4,-12","31,7,-12","32,4,-12","33,3,-12","33,4,-12","33,7,-12","34,4,-12","34,7,-12","35,3,-12","35,4,-12","35,7,-12","36,4,-12","36,7,-12","37,4,-12","37,7,-12","38,7,-12","39,7,-12","40,7,-12","41,7,-12","42,3,-12","42,7,-12","43,6,-12","-1,6,-11","0,3,-11","0,7,-11","6,4,-11","7,3,-11","8,3,-11","8,4,-11","8,7,-11","9,3,-11","10,3,-11","10,4,-11","11,3,-11","11,7,-11","12,3,-11","12,4,-11","13,3,-11","16,3,-11","16,4,-11","16,5,-11","18,3,-11","18,4,-11","18,5,-11","20,3,-11","20,4,-11","20,5,-11","21,3,-11","22,3,-11","22,4,-11","22,5,-11","24,3,-11","24,4,-11","24,5,-11","26,3,-11","26,4,-11","26,5,-11","29,3,-11","30,3,-11","30,4,-11","31,3,-11","31,7,-11","32,3,-11","32,4,-11","33,3,-11","34,3,-11","34,4,-11","35,3,-11","36,4,-11","42,3,-11","42,7,-11","43,6,-11","-1,5,-10","-1,6,-10","0,3,-10","11,7,-10","21,3,-10","21,7,-10","31,7,-10","42,3,-10","43,5,-10","43,6,-10","-1,6,-9","0,2,-9","0,3,-9","0,7,-9","1,2,-9","2,2,-9","3,2,-9","4,2,-9","5,2,-9","6,2,-9","7,2,-9","8,2,-9","9,2,-9","10,2,-9","11,2,-9","11,7,-9","12,2,-9","13,2,-9","14,2,-9","15,2,-9","16,2,-9","16,3,-9","17,2,-9","18,2,-9","19,2,-9","19,3,-9","20,2,-9","20,7,-9","21,3,-9","21,7,-9","22,2,-9","22,7,-9","23,2,-9","23,3,-9","24,2,-9","25,2,-9","26,2,-9","26,3,-9","27,2,-9","28,2,-9","29,2,-9","30,2,-9","31,2,-9","31,7,-9","32,2,-9","33,2,-9","34,2,-9","35,2,-9","36,2,-9","37,2,-9","38,2,-9","39,2,-9","40,2,-9","41,2,-9","42,2,-9","42,3,-9","42,7,-9","43,6,-9","-1,6,-8","0,3,-8","1,7,-8","2,7,-8","3,7,-8","4,7,-8","5,7,-8","6,7,-8","7,7,-8","9,7,-8","10,7,-8","11,7,-8","12,7,-8","13,7,-8","14,7,-8","15,7,-8","16,7,-8","17,7,-8","18,7,-8","19,7,-8","20,7,-8","21,2,-8","21,3,-8","21,7,-8","22,7,-8","23,7,-8","24,7,-8","25,7,-8","26,7,-8","27,7,-8","28,7,-8","29,7,-8","30,7,-8","31,7,-8","32,7,-8","33,7,-8","34,7,-8","35,7,-8","36,7,-8","37,7,-8","38,7,-8","39,7,-8","40,7,-8","41,7,-8","42,3,-8","42,7,-8","43,6,-8","-1,6,-7","0,3,-7","8,7,-7","21,3,-7","42,3,-7","43,6,-7","-1,5,-6","-1,6,-6","0,3,-6","14,3,-6","16,3,-6","16,4,-6","16,5,-6","19,3,-6","19,4,-6","19,5,-6","21,3,-6","23,3,-6","23,4,-6","23,5,-6","26,3,-6","26,4,-6","26,5,-6","28,3,-6","42,3,-6","43,5,-6","43,6,-6","-1,6,-5","0,2,-5","0,3,-5","0,7,-5","1,2,-5","1,3,-5","2,2,-5","2,3,-5","3,2,-5","3,3,-5","4,2,-5","4,3,-5","5,2,-5","5,3,-5","6,2,-5","7,2,-5","8,2,-5","9,2,-5","10,2,-5","10,3,-5","11,2,-5","11,3,-5","12,2,-5","12,3,-5","13,2,-5","13,3,-5","14,2,-5","14,3,-5","15,2,-5","16,2,-5","17,2,-5","18,2,-5","19,2,-5","20,2,-5","21,6,-5","22,2,-5","23,2,-5","24,2,-5","25,2,-5","26,2,-5","27,2,-5","28,2,-5","28,3,-5","29,2,-5","29,3,-5","30,2,-5","30,3,-5","31,2,-5","31,3,-5","32,2,-5","32,3,-5","33,2,-5","34,2,-5","35,2,-5","36,2,-5","37,2,-5","37,3,-5","38,2,-5","38,3,-5","39,2,-5","39,3,-5","40,2,-5","40,3,-5","41,2,-5","41,3,-5","42,2,-5","42,3,-5","43,6,-5","-1,6,-4","0,3,-4","1,3,-4","1,7,-4","2,3,-4","2,7,-4","3,3,-4","3,7,-4","4,3,-4","4,7,-4","5,3,-4","5,7,-4","6,7,-4","7,7,-4","9,7,-4","10,3,-4","10,7,-4","11,3,-4","11,7,-4","12,3,-4","12,7,-4","13,3,-4","13,7,-4","14,3,-4","14,7,-4","15,7,-4","16,7,-4","17,7,-4","18,7,-4","19,7,-4","20,7,-4","21,2,-4","21,3,-4","21,7,-4","22,7,-4","23,7,-4","24,7,-4","25,7,-4","26,7,-4","27,7,-4","28,3,-4","28,7,-4","29,3,-4","29,7,-4","30,3,-4","30,7,-4","31,3,-4","31,7,-4","32,3,-4","32,7,-4","33,7,-4","34,7,-4","35,7,-4","36,7,-4","37,3,-4","37,7,-4","38,3,-4","38,7,-4","39,3,-4","39,7,-4","40,3,-4","40,7,-4","41,3,-4","41,7,-4","42,3,-4","42,7,-4","43,6,-4","-1,6,-3","0,3,-3","1,3,-3","2,3,-3","3,3,-3","4,3,-3","5,3,-3","10,3,-3","11,3,-3","12,3,-3","13,3,-3","14,3,-3","16,3,-3","16,4,-3","16,5,-3","19,3,-3","19,4,-3","19,5,-3","21,3,-3","23,3,-3","23,4,-3","23,5,-3","26,3,-3","26,4,-3","26,5,-3","28,3,-3","29,3,-3","30,3,-3","31,3,-3","32,3,-3","37,3,-3","38,3,-3","39,3,-3","40,3,-3","41,3,-3","42,3,-3","43,6,-3","-1,5,-2","-1,6,-2","0,3,-2","1,3,-2","2,3,-2","3,3,-2","4,3,-2","5,3,-2","10,3,-2","11,3,-2","12,3,-2","13,3,-2","14,3,-2","20,8,-2","21,3,-2","22,8,-2","28,3,-2","29,3,-2","30,3,-2","31,3,-2","32,3,-2","37,3,-2","38,3,-2","39,3,-2","40,3,-2","41,3,-2","42,3,-2","43,5,-2","43,6,-2","-1,0,-1","-1,1,-1","-1,2,-1","0,1,-1","0,2,-1","0,3,-1","0,7,-1","1,0,-1","1,1,-1","1,2,-1","1,3,-1","2,2,-1","2,3,-1","3,2,-1","3,3,-1","4,2,-1","4,3,-1","5,2,-1","5,3,-1","6,2,-1","7,2,-1","8,2,-1","8,7,-1","9,2,-1","10,2,-1","10,3,-1","11,2,-1","11,3,-1","12,2,-1","12,3,-1","13,2,-1","13,3,-1","14,2,-1","14,3,-1","15,2,-1","16,2,-1","16,4,-1","17,2,-1","18,2,-1","19,2,-1","19,4,-1","20,0,-1","20,1,-1","20,2,-1","21,1,-1","21,3,-1","21,8,-1","22,0,-1","22,1,-1","22,2,-1","23,2,-1","23,4,-1","24,2,-1","25,2,-1","26,2,-1","26,4,-1","27,2,-1","28,2,-1","28,3,-1","29,2,-1","29,3,-1","30,2,-1","30,3,-1","31,2,-1","31,3,-1","32,2,-1","32,3,-1","33,2,-1","34,2,-1","35,2,-1","36,2,-1","37,2,-1","37,3,-1","38,2,-1","38,3,-1","39,2,-1","39,3,-1","40,2,-1","40,3,-1","41,0,-1","41,1,-1","41,2,-1","41,3,-1","42,1,-1","42,2,-1","42,3,-1","43,0,-1","43,1,-1","43,2,-1","-1,1,0","-1,2,0","0,1,0","0,2,0","0,3,0","0,7,0","1,1,0","1,2,0","1,3,0","1,7,0","2,3,0","3,3,0","4,3,0","5,2,0","5,3,0","5,7,0","6,3,0","7,3,0","8,3,0","9,2,0","9,3,0","9,7,0","10,3,0","10,7,0","11,3,0","12,3,0","12,7,0","13,2,0","13,3,0","13,7,0","14,3,0","15,3,0","16,3,0","17,2,0","17,3,0","17,7,0","18,3,0","19,3,0","20,1,0","20,3,0","21,0,0","21,1,0","21,2,0","21,3,0","21,7,0","21,8,0","22,1,0","22,2,0","22,3,0","22,7,0","23,3,0","24,3,0","25,3,0","26,2,0","26,3,0","26,7,0","27,3,0","28,3,0","29,3,0","30,2,0","30,3,0","30,7,0","31,3,0","32,3,0","32,7,0","33,3,0","33,7,0","34,2,0","34,3,0","34,7,0","35,3,0","36,3,0","37,3,0","38,2,0","38,3,0","38,7,0","39,3,0","40,3,0","41,1,0","41,3,0","42,0,0","42,1,0","42,2,0","42,3,0","42,7,0","43,1,0","43,2,0","-1,0,1","-1,1,1","-1,2,1","0,1,1","0,2,1","1,0,1","1,1,1","1,2,1","2,5,1","2,6,1","3,5,1","3,6,1","4,6,1","5,6,1","6,6,1","7,5,1","7,6,1","8,6,1","9,6,1","10,6,1","11,5,1","11,6,1","12,6,1","13,6,1","14,6,1","15,5,1","15,6,1","16,6,1","17,6,1","18,6,1","19,5,1","19,6,1","20,0,1","20,1,1","20,2,1","21,1,1","21,2,1","22,0,1","22,1,1","22,2,1","23,5,1","23,6,1","24,6,1","25,6,1","26,6,1","27,5,1","27,6,1","28,6,1","29,6,1","30,6,1","31,5,1","31,6,1","32,6,1","33,6,1","34,6,1","35,5,1","35,6,1","36,6,1","37,6,1","38,6,1","39,5,1","39,6,1","40,5,1","40,6,1","41,0,1","41,1,1","41,2,1","42,1,1","42,2,1","43,0,1","43,1,1","43,2,1","26,19,-32","34,7,-25","34,8,-24","34,8,-26","34,8,-25","35,8,-14","35,8,-13","35,8,-12","35,8,-11","35,8,-10","35,8,-9","35,9,-13","34,9,-13","35,10,-13","35,11,-13","35,12,-13","31,8,-11","31,9,-11","30,9,-11","21,8,-4","35,9,-12","35,9,-11","35,9,-10","35,9,-9","35,10,-12","35,10,-11","35,10,-10","35,10,-9","35,11,-9","35,11,-10","35,11,-11","35,11,-12","35,12,-12","35,12,-11","35,12,-10","35,12,-9","34,9,-12","34,9,-11","34,9,-10","34,9,-9","34,8,-14","30,8,-11","29,8,-11","28,8,-11","27,8,-11","27,8,-12","27,8,-10","28,8,-12","28,8,-10","29,8,-12","29,8,-10","30,8,-12","30,8,-10","31,8,-12","31,8,-10","35,13,-13","35,13,-12","35,13,-11","35,13,-10","35,13,-9","33,8,-11"],"BLR":[6,23,10,2,10,6,22,9,15,2,22,2,2,2,2,22,2,2,2,2,22,2,2,2,2,22,2,2,2,2,14,2,6,23,11,2,10,6,22,9,14,2,2,2,2,23,2,2,2,2,23,2,2,2,2,23,2,2,2,2,23,2,13,2,6,23,11,2,10,6,22,10,2,11,2,0,0,8,0,2,9,9,9,3,9,15,9,9,9,3,9,15,9,0,9,1,9,3,9,0,9,9,9,3,9,15,9,9,9,2,3,9,15,2,0,0,9,0,2,1,9,9,9,9,15,1,9,9,9,9,15,1,9,0,9,9,3,9,0,1,9,9,9,9,15,1,9,9,9,2,9,15,2,0,0,8,0,2,9,7,21,11,2,9,5,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,20,0,7,21,0,2,9,5,16,0,21,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,21,0,0,2,9,12,5,20,9,15,3,9,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,13,1,12,3,9,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,9,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,9,12,1,3,2,9,14,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,2,2,9,2,2,2,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,9,1,3,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,1,3,9,7,3,3,3,3,3,3,9,1,1,1,1,1,1,5,9,1,12,3,9,9,9,12,1,3,2,9,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,1,3,9,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,9,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,9,0,1,3,9,0,3,9,1,9,0,1,12,3,9,6,22,3,6,8,3,6,8,3,3,6,23,22,22,22,22,22,22,22,22,22,9,2,23,23,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,23,22,1,6,8,1,1,6,8,1,6,23,6,9,12,1,3,2,9,0,2,2,2,2,2,6,2,22,2,17,6,2,22,2,17,6,2,22,2,17,6,3,2,22,2,2,17,6,2,2,2,2,2,2,2,2,9,0,2,2,2,2,2,2,2,2,19,6,2,23,2,2,19,6,1,2,23,2,19,6,2,23,2,2,19,6,2,23,2,6,2,2,2,2,2,9,0,1,3,9,0,0,0,0,22,0,10,22,6,0,17,22,16,0,10,22,6,0,17,22,16,0,10,22,6,0,17,22,16,0,10,22,6,0,7,22,23,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,9,0,3,3,3,0,0,3,3,3,0,0,3,3,3,0,0,5,23,22,0,10,23,6,0,19,23,18,0,10,23,6,0,19,23,18,0,10,23,6,0,19,23,18,0,10,23,6,0,23,0,0,0,0,0,9,12,1,3,9,1,1,1,1,9,1,3,1,1,9,1,3,1,9,1,3,3,4,21,6,9,1,6,22,6,3,1,3,11,3,1,3,3,11,3,1,3,11,3,3,3,9,1,12,3,9,20,8,20,4,16,20,17,8,20,4,16,20,17,8,20,4,16,20,17,8,20,4,7,20,21,16,1,1,1,1,1,1,1,1,1,9,3,3,3,3,3,3,3,3,3,5,21,20,18,8,21,4,18,21,19,8,21,4,18,21,19,8,21,4,18,21,19,8,21,4,21,9,12,1,3,2,9,14,2,2,2,2,2,4,2,20,2,16,4,2,20,2,16,4,2,20,2,16,4,2,20,2,16,4,2,2,2,2,2,2,2,2,9,2,2,2,2,2,2,2,2,2,18,4,2,21,2,18,4,2,21,2,18,4,2,21,2,18,4,2,21,2,4,2,2,2,2,2,9,1,3,9,0,0,0,0,0,4,0,20,0,3,4,0,10,0,3,4,0,10,0,3,4,0,21,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,9,0,3,3,3,0,0,3,3,3,0,0,3,3,3,0,0,20,0,1,4,0,2,10,0,1,4,0,10,0,1,4,21,0,4,0,0,0,0,0,0,9,12,1,3,9,9,9,1,12,3,9,16,1,9,3,18,9,12,1,6,23,10,4,2,2,9,14,6,22,2,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,0,2,0,2,12,2,2,2,2,2,7,19,2,0,2,9,2,5,22,2,2,2,2,2,2,2,12,2,0,2,0,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,12,2,12,6,19,2,2,2,9,6,22,10,4,2,11,23,14,2,0,0,10,3,0,2,1,13,0,7,0,7,0,7,3,3,1,0,7,0,7,0,7,0,7,3,3,1,0,7,0,0,7,1,0,7,3,7,3,0,1,3,7,7,0,3,3,3,1,0,3,0,0,0,10,0,0,1,3,1,1,0,1,1,5,5,3,1,1,5,1,0,0,5,0,5,3,0,5,0,1,0,5,1,0,5,0,5,0,5,3,1,0,5,1,0,5,0,5,2,15,3,2,0,0,10,1,0,2,9,22,14,7,21,11,23,2,9,5,16,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,0,0,0,0,2,0,0,0,0,0,0,7,21,0,0,0,9,0,5,16,0,0,0,0,0,0,2,0,0,0,0,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,7,21,0,2,9,12,5,20,9,22,15,3,9,19,1,9,3,17,9,13,1,12,3,9,9,9,12,1,3,2,9,14,2,2,2,2,2,2,6,2,22,2,3,6,2,8,2,3,6,2,8,2,3,6,2,23,2,2,2,3,3,3,2,2,3,3,3,2,2,3,3,9,2,1,1,2,2,1,1,1,2,2,1,1,1,2,2,2,22,2,1,6,2,8,2,1,6,2,8,2,1,6,2,23,2,6,2,2,2,2,2,2,9,1,3,9,0,0,0,0,6,0,22,0,17,6,0,22,0,17,6,0,22,0,17,6,0,22,0,17,6,0,0,0,0,0,0,1,0,0,0,9,0,0,3,0,0,0,0,0,0,19,6,0,23,0,19,6,0,23,0,19,6,0,23,0,19,6,0,23,0,6,0,0,0,0,0,9,12,1,3,9,22,10,22,6,17,22,16,10,22,6,0,17,22,16,10,22,6,17,22,16,10,22,6,7,22,23,19,3,3,3,3,3,3,3,3,9,1,1,1,1,1,1,1,1,5,23,22,17,10,23,6,19,23,18,10,23,6,19,23,18,10,23,6,19,23,18,10,23,6,23,9,1,12,3,9,1,1,1,1,9,1,3,1,1,9,1,3,1,9,1,3,3,4,21,4,1,4,3,1,6,22,4,3,1,3,11,3,1,3,3,11,3,1,3,11,3,3,3,9,12,1,3,2,9,14,2,2,2,2,2,20,2,8,20,4,2,16,20,17,2,8,20,4,2,16,20,17,2,8,20,4,2,16,20,17,2,8,20,4,2,7,20,21,2,2,2,3,3,3,2,2,3,3,3,2,2,3,3,9,2,1,1,2,2,1,1,1,2,2,1,1,1,2,2,2,5,21,20,2,8,21,4,2,18,21,19,2,8,21,4,2,18,21,19,2,8,21,4,2,18,21,19,2,8,21,4,2,21,2,2,2,2,2,9,1,3,9,0,0,0,0,0,4,0,20,0,16,4,0,20,16,4,0,20,16,4,3,20,0,16,4,0,0,0,0,0,0,1,0,0,9,0,3,0,0,0,0,0,0,18,4,0,21,0,18,4,1,21,18,4,0,21,0,18,4,0,21,0,4,0,0,0,0,0,9,0,1,3,9,0,4,20,3,4,0,10,3,4,10,3,3,4,21,21,21,21,21,21,21,21,21,21,9,20,20,20,20,20,20,20,20,20,20,1,4,10,1,1,4,10,1,4,21,4,9,0,1,12,3,9,3,9,2,1,9,12,1,3,2,9,0,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,3,2,2,2,3,2,2,9,0,2,2,2,1,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,9,0,1,3,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,1,3,9,0,9,9,1,12,3,9,7,3,3,3,3,3,3,9,1,1,1,1,1,1,5,9,12,1,3,2,9,14,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,2,4,2,2,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,2,0,2,9,1,3,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,1,3,9,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,9,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,9,1,12,3,9,0,0,0,0,0,0,0,0,0,0,3,9,1,0,0,0,0,0,0,0,0,0,0,9,12,1,6,23,10,3,2,9,14,6,22,2,0,2,0,2,0,2,0,2,0,2,2,2,14,2,2,0,2,0,2,0,2,0,2,0,2,2,21,2,2,2,21,6,19,2,0,9,0,6,22,2,2,20,2,2,2,20,2,2,0,2,0,2,0,2,0,2,0,2,2,2,2,2,0,2,0,2,0,2,0,6,19,2,0,2,2,9,6,22,10,3,11,0,0,8,0,3,1,9,13,9,9,9,1,9,13,9,9,9,1,9,0,9,1,9,9,0,1,9,13,9,9,9,1,9,13,9,9,0,9,0,0,0,8,0,0,0,1,9,13,9,9,9,1,9,13,9,9,9,1,9,0,9,9,3,9,0,1,9,13,9,9,9,1,9,13,9,9,2,9,2,0,0,8,0,2,9,7,21,11,3,8,5,16,9,12,0,13,0,0,0,0,13,0,0,0,0,13,0,0,0,0,13,0,0,0,0,12,0,7,21,11,0,8,5,20,9,12,0,0,0,0,15,0,0,0,0,15,0,0,0,0,15,0,0,0,0,15,0,12,0,7,18,11,2,8,5,20,9,2,0,0,0,2,0,0,0,0,0,0,10,22,10,10,10,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,22,22,22,22,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,10,10,10,10,10,10],"BP1":null,"BP2":null,"BCI":[30,30,30,30,30,30,30,30,30,0,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,30,30,30,30,30,30,30,30,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,30,0,30,30,30,30,30,30,30,30,30,30,30,31,31,31,29,30,31,31,31,31,31,28,31,31,31,31,31,28,31,28,31,29,31,31,31,28,31,31,31,31,31,28,31,31,31,30,31,31,28,30,31,31,31,29,30,31,31,31,31,31,28,31,31,31,31,31,28,31,31,28,31,31,29,31,28,31,31,31,31,31,28,31,31,31,31,30,31,28,30,31,31,31,29,30,30,30,30,30,30,31,30,30,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,0,31,31,31,0,31,30,30,31,30,31,30,30,31,0,31,31,31,0,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,30,30,0,31,30,31,28,30,30,30,30,0,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,30,0,30,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,30,0,0,31,31,28,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,0,0,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,28,0,0,31,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,31,0,30,0,31,31,31,30,0,0,31,31,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,31,28,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,31,31,0,31,31,31,28,31,0,31,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,28,0,0,31,29,29,31,29,31,29,0,30,0,31,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,31,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,30,0,0,31,31,28,31,31,31,31,31,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,31,0,31,31,0,0,31,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,31,31,0,0,31,0,31,31,0,0,31,31,0,31,0,0,31,0,31,31,0,0,31,0,31,0,31,31,31,31,31,31,28,0,0,31,31,31,31,31,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,31,0,0,0,31,31,0,0,0,31,31,0,0,0,31,31,31,31,0,0,0,31,31,0,0,0,31,31,0,0,0,31,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,31,31,31,31,31,31,28,0,0,31,31,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,31,0,31,0,30,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,30,0,0,31,31,28,31,31,31,31,31,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,31,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,31,31,31,31,31,31,0,0,31,31,31,31,31,31,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,31,0,0,0,31,31,0,0,0,31,31,0,0,0,31,31,31,31,0,0,0,31,31,0,0,0,31,31,0,0,0,31,31,0,31,0,0,31,0,0,31,0,0,31,0,31,0,0,0,31,0,31,31,31,31,31,31,31,28,0,0,31,31,31,0,30,0,31,0,0,31,0,0,31,30,0,30,30,30,30,30,31,31,28,30,30,31,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,30,30,31,30,31,31,28,30,30,31,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,30,30,31,30,31,31,30,30,30,30,30,30,0,30,30,31,31,31,0,29,30,31,0,0,0,0,0,0,0,0,28,31,0,0,0,0,0,0,0,0,0,28,31,0,0,28,0,0,29,0,0,0,0,0,28,31,0,0,0,0,0,0,28,31,30,28,30,31,31,31,29,30,31,28,31,0,0,0,0,0,0,28,31,0,0,0,28,0,0,0,0,29,0,0,28,31,0,0,0,0,0,0,0,0,0,28,31,0,0,0,0,0,0,0,30,0,28,30,31,31,31,0,29,30,30,0,30,30,30,30,30,30,31,30,30,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,31,30,30,31,30,31,31,28,30,30,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,0,31,30,30,31,30,31,28,30,30,30,30,30,0,31,0,0,31,0,0,31,30,0,30,0,31,31,31,30,0,0,31,31,28,31,31,31,31,31,31,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,31,31,0,0,0,31,31,0,0,0,31,31,0,0,31,31,0,0,31,31,0,0,0,31,31,0,0,0,31,31,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,31,31,31,31,31,31,31,0,0,31,31,31,31,31,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,31,31,31,31,31,0,31,31,31,31,28,31,0,31,31,31,31,31,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,0,31,0,31,0,31,31,31,31,31,31,28,0,0,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,30,0,31,31,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,31,0,31,30,0,0,31,31,28,31,31,31,31,31,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,31,31,0,0,0,31,31,0,0,0,31,31,0,0,31,31,0,0,31,31,0,0,0,31,31,0,0,0,31,31,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,31,0,31,31,31,31,31,31,0,0,31,28,31,31,31,31,0,31,0,31,0,0,31,0,0,0,31,0,0,0,31,0,31,0,0,31,31,31,31,31,31,0,31,31,31,28,0,31,31,31,31,31,31,0,0,31,0,31,0,0,31,0,0,0,31,0,31,0,0,31,0,31,0,31,31,31,31,31,31,28,0,0,31,29,0,0,0,0,31,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,29,0,30,0,31,29,31,29,29,31,30,0,0,31,31,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,31,31,0,31,31,31,28,31,31,31,0,31,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,28,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,28,0,0,31,31,31,31,0,30,0,31,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,31,30,0,0,31,31,28,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,0,0,31,0,31,0,31,0,31,0,31,0,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,31,31,31,31,28,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,28,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,30,0,31,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,31,30,0,30,30,30,31,31,31,28,30,30,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,31,0,31,0,31,0,31,0,31,0,31,31,0,31,31,31,0,30,30,31,31,31,0,30,30,31,31,0,31,31,31,0,31,31,0,31,0,31,0,31,0,31,0,31,31,31,31,31,0,31,0,31,0,31,0,30,30,31,0,31,31,31,30,30,30,31,30,31,31,31,29,31,31,31,28,31,31,31,31,31,28,31,31,31,31,31,28,31,29,31,31,28,31,31,28,31,31,31,31,31,28,31,31,31,31,31,31,31,31,29,0,31,31,31,28,31,31,31,31,31,28,31,31,31,31,31,28,31,31,29,31,28,31,31,28,31,31,31,31,31,28,31,31,31,31,31,31,31,31,29,31,30,30,30,30,31,30,30,30,30,30,0,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,30,30,30,31,30,30,30,30,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,0,0,0,30,0,30,0,30,30,30,31,30,30,30,30,0,31,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAABUAAAAAAAAAAAAAAABzJwAAAAAAZAAAAAAAAMF9Vp8AAAAABwAAAAcAAAAAAAAAAAAABAEAAAA57QcAAAAAAAcAAAAHAAEAAAAAAAAAAAQAAAAAPjUUAAAAAAAHAAAAIwABAAAAAAAACgAEzczMPQsABM3MzD0MAATNzMw9DQAEzczMPQ4ABM3MzD1SQwAAAAAAAAcAAAAAAAEAAAAAAADESgAAAAAAAAcAAAAcAAAAAAAAAAAAAATb3i5JAQAEBGWXRgIABIBNuUgDAAT25iVJK94KAAAAAAAHAAAACAABAAAAAAAAAAABAAEAAQAyjlAAAAAAAAcAAAAAAAAAAAAAAADQq2UAAAAAAA4AAAAHAAAAAAAAAAABAAAAAAcAEQAEAQAAAC7LBAAAAAAABwAAAAAAJIgAAAAAAMInYQAAAAAABwAAAEYAAAAAAAAAAAAABAAASEIKAAQAAMjBDwAEAABcQhQABAAA+kMZAAQAgDtFMgAEAEAcRjcABABAHEYeAAQAAIA/IwAEAACAPygABAAAoEES6AEAAAAAAA4AAAAAAA8nAAAAAACghgEAAAAAoflWAAAAAAAqAAAAmQAPJwAAAAAAoGNvAAAaALCKbwAAGgChY28AAE4AomNvAABoAKNjbwAAfQAAABAAAAAAAAAAAAAAAAAAAAAAAQAEoWNvAAAAEAAAAAAAAAAAAAAAAAAAAAABAASiY28AAgAQAAAAAAAAAAAAAAAAAAAAAAMABKNjbwAAAAlIRSBoZWFkIDEBAAQCAAAA9AEEAAD6QwEABAAAAAACAAQAAAAAAwAEAAAAAAAABB0AAAABAAQAAAAAAgAEAAAAAAMABAAAAAA=","designChanged":false,"blueprintVersion":38,"blueprintName":"building platform","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":412,"LocalPosition":"10019.18,0.9541228,10057.87","LocalRotation":"0,0,0,1","ForceId":1205166721,"TotalBlockCount":2832,"MaxCords":"43,20,3","MinCords":"-1,-1,-43","BlockIds":[1476,1452,1483,416,1455,1480,1452,1483,1468,627,1451,627,627,627,627,1451,627,627,627,627,1451,627,627,627,627,1451,627,627,627,627,1468,627,1476,1452,1479,416,1455,1480,1452,1483,1472,627,627,627,627,1450,627,627,627,627,1450,627,627,627,627,1450,627,627,627,627,1450,627,1472,627,1476,1452,1479,416,1455,1480,1452,1479,416,1455,416,670,670,1445,670,416,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,1445,1443,1445,1445,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,1445,416,1445,1445,1445,416,670,670,1445,670,416,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,1445,1445,1443,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,416,1445,1445,416,670,670,1445,670,416,1455,1476,1452,1483,416,1445,1480,1452,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,783,1445,1445,1445,783,1445,1476,1452,1445,416,1445,1480,1452,1445,783,1445,1445,1445,783,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,1476,1452,608,1445,416,1445,1445,1480,1452,1479,1468,627,1445,608,608,608,608,608,627,627,627,627,627,1445,627,627,627,627,627,608,608,608,608,608,1445,1472,627,1451,627,1445,608,608,608,608,608,627,627,627,627,627,783,783,783,783,783,783,1445,783,783,783,783,783,783,627,627,627,627,627,608,608,608,608,608,1445,1450,627,627,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,627,627,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,627,627,1445,759,753,753,753,753,753,753,1445,753,753,753,753,753,753,759,1445,627,1451,627,1445,1445,1445,1450,627,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,627,627,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,1445,1443,1445,1445,1445,804,1445,1445,1445,804,1445,1445,1445,670,1445,804,1445,1445,1445,804,1445,1445,1445,1445,1443,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,627,627,1445,1443,1443,1445,1443,1445,1443,627,1451,627,1445,834,816,830,834,825,830,834,825,1443,830,834,816,790,790,790,790,790,790,790,790,790,1445,1443,790,790,790,790,790,790,50,49,49,49,49,49,49,49,49,49,49,49,85,790,790,790,816,830,834,825,1443,830,834,825,830,834,816,834,1445,1450,627,627,1445,1445,670,1445,1445,1445,1445,1445,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1443,1445,815,1445,1445,830,834,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,830,834,1445,815,1445,1445,830,834,1443,1445,815,1445,830,834,1445,815,1445,1445,830,834,1445,815,1445,834,1445,1445,1445,1445,1445,1445,670,627,627,1445,1445,1445,1445,1445,815,1445,836,818,837,1445,816,815,816,1445,836,818,837,1445,816,815,816,1445,836,818,837,1445,816,815,816,1445,836,818,837,1445,825,815,816,1445,1445,1817,1817,1817,1445,1445,1817,1817,1817,1445,1445,1817,1817,1817,1445,1445,1445,1445,1830,1830,1830,1445,1445,1830,1830,1830,1445,1445,1830,1830,1830,1445,1445,825,815,816,1445,837,818,836,1445,816,815,816,1445,837,818,836,1445,816,815,816,1445,837,818,836,1445,816,815,816,1445,837,818,836,1445,815,1445,1445,1445,1445,1445,1445,1445,627,627,1445,1445,820,817,817,825,817,830,1445,817,838,817,830,817,838,817,830,825,830,812,816,1445,825,830,812,816,817,830,817,838,817,830,1445,817,838,817,830,817,825,817,1445,820,1445,627,1451,627,1445,815,837,818,836,816,815,816,837,818,836,816,815,816,837,818,836,816,815,816,837,818,836,825,815,816,833,1817,1817,1817,1817,1817,1817,1817,1817,1817,1445,1830,1830,1830,1830,1830,1830,1830,1830,1830,825,815,816,833,836,818,837,816,815,816,836,818,837,816,815,816,836,818,837,816,815,816,836,818,837,815,1445,1450,627,627,1445,1445,1445,1445,1445,1445,1445,1445,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,834,1445,1445,1445,1445,1445,1445,627,627,1445,1445,1445,1445,1445,1445,834,1445,816,1445,830,834,1445,825,1445,830,834,1445,825,1445,830,834,1445,816,1445,1445,1817,1817,1817,1445,1445,1817,1817,1817,1445,1445,1817,1817,1817,1445,1445,1445,1445,1830,1830,1830,1445,1445,1830,1830,1830,1445,1445,1830,1830,1830,1445,1445,816,1445,830,834,1445,621,825,1445,830,834,1445,825,1445,830,834,816,1445,834,1445,1445,1445,1445,1445,1445,1445,1445,627,627,1445,1445,1445,627,1468,627,1445,831,4,1445,4,831,1445,1472,627,1476,1452,1483,883,416,1445,1445,1445,1480,1452,1445,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,51,1445,95,1445,72,1445,1445,1445,1445,1445,1480,1452,1445,416,1445,1445,1445,1476,1452,1445,1445,1445,1445,1445,1445,1445,72,1445,95,1445,51,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1476,1452,1445,416,1445,1445,1480,1452,1479,882,416,1455,819,14,416,670,670,1444,821,670,416,1445,72,49,72,49,72,49,72,833,1445,1445,49,72,49,72,49,72,49,72,833,1445,1445,49,72,670,49,72,1443,49,72,46,72,833,670,1445,46,72,825,50,100,72,1445,1445,416,1445,416,670,670,1445,670,416,1445,1445,1445,72,50,100,46,72,825,1445,1445,46,72,833,670,49,72,49,72,1443,49,72,670,1445,49,72,833,49,72,49,72,49,72,1445,1445,49,72,833,49,72,49,72,416,72,1445,416,670,670,1444,821,670,416,1455,819,14,1476,1452,1483,883,416,1445,1480,1452,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,55,1445,55,1445,72,1445,1445,1445,1445,1445,1445,1476,1452,1445,416,1445,1445,1445,1480,1452,1445,1445,1445,1445,1445,1445,72,1445,55,1445,55,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,72,1445,1476,1452,1445,416,1445,1445,1480,1452,1479,882,1468,627,1445,831,4,1445,4,831,1445,1472,627,1451,627,1445,1445,1445,1450,627,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,834,1445,816,1445,830,834,1445,825,1445,830,834,1445,825,1445,830,834,1445,816,1445,1445,1445,1817,1817,1817,1445,1445,1817,1817,1817,1445,1445,1817,1817,1445,1445,1830,1830,1445,1445,1830,1830,1830,1445,1445,1830,1830,1830,1445,1445,1445,816,1445,830,834,1445,825,1445,830,834,1445,825,1445,830,834,1445,816,1445,834,1445,1445,1445,1445,1445,1445,1445,627,627,1445,1445,1445,1445,1445,834,1445,815,1445,830,834,1445,815,670,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,1445,1445,1445,1445,1445,1817,1445,1445,1445,1445,1445,1445,1830,1445,1445,1445,1445,1445,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,830,834,1445,815,1445,834,1445,1445,1445,1445,1445,1445,1445,627,627,1445,815,836,818,837,816,815,816,836,818,837,1445,816,815,816,836,818,837,816,815,816,836,818,837,825,815,816,833,1817,1817,1817,1817,1817,1817,1817,1817,1445,1830,1830,1830,1830,1830,1830,1830,1830,825,815,816,833,837,818,836,816,815,816,837,818,836,816,815,816,837,818,836,816,815,816,837,818,836,815,1445,627,1451,627,1445,1445,820,817,817,825,817,830,1445,817,838,817,830,817,838,817,830,825,830,812,816,1817,1445,1830,825,830,812,816,817,830,817,838,817,830,1445,817,838,817,830,817,825,817,1445,820,1445,1450,627,627,1445,1445,1445,1445,1445,1445,1445,1445,815,1445,837,818,836,1445,816,815,816,1445,837,818,836,1445,816,815,816,1445,837,818,836,1445,816,815,816,1445,837,818,836,1445,825,815,816,1445,1445,1445,1817,1817,1817,1445,1445,1817,1817,1817,1445,1445,1817,1817,1445,1445,1830,1830,1445,1445,1830,1830,1830,1445,1445,1830,1830,1830,1445,1445,1445,825,815,816,1445,836,818,837,1445,816,815,816,1445,836,818,837,1445,816,815,816,1445,836,818,837,1445,816,815,816,1445,836,818,837,1445,815,1445,1445,1445,1445,1445,1445,627,627,1445,670,1445,1445,1445,1445,834,1445,815,1445,830,834,1445,815,830,834,1445,815,830,834,1443,815,1445,830,834,1445,1445,1445,1445,1445,1445,1817,1445,1445,1445,670,1830,1445,1445,1445,1445,1445,1445,830,834,1445,815,1445,830,834,1443,815,830,834,1445,815,1445,830,834,1445,815,1445,834,1445,1445,1445,1445,1445,1445,670,627,627,1445,1443,834,816,830,834,1445,825,830,834,825,1443,830,834,816,790,790,790,790,790,790,790,790,790,1445,790,790,790,790,790,790,790,790,790,816,830,834,825,1443,830,834,825,830,834,816,834,1445,1443,627,1451,627,1445,1443,1445,1443,1443,1445,1450,627,627,1445,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1443,1445,1445,1445,1445,1445,804,1445,1445,1445,804,1445,1445,1445,670,1445,1445,1445,804,1445,1445,1445,804,1445,1445,1445,1445,1445,1443,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,627,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,627,627,1445,1445,1445,1445,627,1451,627,1445,759,753,753,753,753,753,753,1445,753,753,753,753,753,753,759,1445,1450,627,627,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,627,627,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,627,627,1445,608,608,608,608,608,627,627,627,627,627,783,783,783,783,783,783,1445,783,783,783,783,783,783,627,627,627,627,627,608,608,608,608,608,1445,627,1468,627,1445,608,608,608,608,608,627,627,627,627,627,610,1445,616,627,627,627,627,627,608,608,608,608,608,1445,1472,627,1476,1452,1483,416,1445,1445,1445,1480,1452,1445,608,1445,608,1445,608,1445,608,1445,608,1445,1445,1445,1444,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,783,1445,1445,1445,783,1476,1452,1445,416,1445,617,1480,1452,1445,1445,783,1445,1445,1445,783,1445,1445,627,1445,627,1445,627,1445,627,1445,627,1445,1445,1445,1445,1445,608,1445,608,1445,608,1445,608,1476,1452,1445,608,416,1445,1445,1480,1452,1479,416,1455,670,670,1445,670,416,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,1445,1443,1445,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,416,1445,416,670,670,1445,670,612,416,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,670,1445,1445,1443,1445,670,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,1445,416,1445,416,670,670,1445,670,416,1455,1476,1452,1483,416,1455,1480,1452,1479,1468,627,1451,627,627,627,627,1451,627,627,627,627,1451,627,627,627,627,1451,627,627,627,627,1472,627,1476,1452,1483,416,1455,1480,1452,1479,1468,627,627,627,627,1450,627,627,627,627,1450,627,627,627,627,1450,627,627,627,627,1450,627,1472,627,1476,1452,1483,416,1455,1480,1452,1479,582,1445,605,646,621,361,360,360,360,360,360,390,386,387,387,387,50,46,51,615,390,390,390,390,387,387,387,387,387,387,387,387,387,387,387,387,386,386,386,386,409,49,49,49,49,72,72,72,72,72,72,72,72,72,72,387,387,387,387,387,621],"BlockState":"=0,2629","AliveCount":2629,"BlockStringData":["-- Set up a WeaponGroup to aim and fire all turrets whichs turret base is named like <WeaponName> says.\r\n-- each WeaponGroup should contain weapons with the same BulletSpeed\r\n\r\n--                      ControllingAiName   BulletSpeed     Mass    Drag    WeaponName  PlanarAccelerationOnly  Rpm     AnimationName\r\nWeaponGroupsSetting = {\n                        {\"Ai01\",            468,            0,      0,      \"group01\",  false     }\r\n                      }\r\n\r\n\r\n-- Weapons may have an animation. Create an AnimationSettings and refer to it in the WeaponGroupsSetting using the AnimationName.\r\n-- The AnimationName decides what WeaponGroup will use what AnimationSetting.\r\n\r\n-- AnimationType: There may be different kinds of animations.\r\n-- AngleMax: max angle of the spinners used to create the animation.\r\n-- Fraction: fraction = 4 means, that the animation will be pushed in by recoil for 25% of the time\r\n--           and that it will use 75% of the time to extend back to starting position\r\n-- SpinnerName: the name of the most outward spinner of 3 stacked spinners, which create the movement\r\n\r\n--                    AnimationName     AnimationType   AngleMax    Fraction    SpinnerName     Resting\r\nAnimationSettings = {{\"recoil01\",       \"recoil\",       20,         12,          \"rc an\",        0.25}\r\n                    }\r\n\r\n\r\n-- acceleration is avaraged over so many seconds\r\nAccAvTime = 2\r\n\r\n\r\n---Enumerations for Logging purposes\r\nERROR = 0\r\nWARNING = 1\r\nSUCCESS = 2\r\nSYSTEM = 3\r\nLISTS = 4\r\nVECTORS = 5\r\nDebugLevel = SYSTEM\r\n\r\nfunction MyLog(I,priority,message)\r\n    if priority <= DebugLevel then\r\n        I:Log(message)\r\n    end\r\nend\r\n\r\n\r\n-- Function to calculate the mean of a lists values\r\nfunction calculateMean(list)\r\n    local sum = Vector3(0,0,0)\r\n\r\n    -- Calculate the sum of all the values\r\n    for _, value in ipairs(list) do\r\n        sum = sum + value\r\n    end\r\n\r\n    -- Calculate the mean\r\n    local mean = sum / #list\r\n\r\n    return mean\r\nend\r\n\r\n\r\n-- returns leanght of lists containing nils\r\nfunction NilListLenght(list)\r\n    local a = 0\r\n    for _,_ in pairs(list) do a = a+1 end\r\n    return a\r\nend\r\n\r\n\r\n-- output LIST: {SubConstructIdentifier1, SubConstructIdentifier2, SubConstructIdentifier3, ...}\r\n-- returns a list of all subconstructs with condition:\r\n-- <CodeWord> is part of CustomName\r\nfunction FindAllSubconstructs(I, CodeWord)\r\n    local ChosenSubconstructs = {}\r\n    local SubconstructsCount = I:GetAllSubconstructsCount()\r\n    for index = 0, SubconstructsCount-1 do\r\n        local SubConstructIdentifier = I:GetSubConstructIdentifier(index)\r\n        if I:GetSubConstructInfo(SubConstructIdentifier).Valid then\r\n            if string.find(I:GetSubConstructInfo(SubConstructIdentifier).CustomName, CodeWord) then\r\n                table.insert(ChosenSubconstructs, SubConstructIdentifier)\r\n            end\r\n        else\r\n            --ERROR\r\n        end\r\n    end\r\n    return ChosenSubconstructs\r\nend\r\n\r\n\r\n-- collects all informations needed to control a specific turret\r\n-- this includes the animations placed on a turret\r\nfunction CreateWeaponList(I,WeaponGroup)\r\n    local CodeWord = WeaponGroup.WeaponName\r\n    local AnimationSetting = WeaponGroup.AnimationSetting\r\n    local WeaponSystems = {}\r\n    local Turrets = FindAllSubconstructs(I, CodeWord)\r\n    for _, SubConstructIdentifier in pairs(Turrets) do\r\n        for weaponIndex = 0 ,I:GetWeaponCount() - 1 do\r\n            if SubConstructIdentifier == I:GetWeaponBlockInfo(weaponIndex).SubConstructIdentifier then\r\n\r\n                -- calls the init functions for the different animations\r\n                local Animation = {}\r\n                if AnimationSetting[2] == \"recoil\" then\r\n                    Animation = RecoilInit(I, SubConstructIdentifier, WeaponGroup, AnimationSetting)\r\n                end\r\n                table.insert(WeaponSystems, {SubConstructIdentifier = SubConstructIdentifier, weaponIndex = weaponIndex, FiredLast = 0, Animation = Animation})\r\n            end\r\n        end\r\n    end\r\n    return WeaponSystems\r\nend\r\n\r\n-- This function calculates the AimingDirection, InterceptionPoint, InterceptionTime and barrel elevation\r\n-- for a gun fireing a bullet on a moving target.\r\n-- AimingDirection gives you the direction to aim the barrel.\r\n-- The straightest flight curve is prioritised.\r\n\r\n-- Target               = TargetInfoObject containing {Position=Vector3, Velocity=Vector3, Acceleration=Vector3}\r\n-- Pos                  = Vector3 where the bullet spawns in global space\r\n-- Vel                  = scalar speed of the bullet\r\n-- Mass                 = bullet mass\r\n-- Drag                 = Drag of the bullet in [N*s/m] (which are newton per, meter per second)\r\n-- MaxIterationSteps    = maximum iterations to get more accurate\r\n-- Accuracy             = Accuracy in meters of the aproximation\r\n\r\n-- Drag is only aproximated as well. I recomend not using this for very slow bullets!\r\n\r\nfunction TargetPrediction(I,Target,Pos,Vel,Mass,Drag,MaxIterationSteps,Accuracy)\r\n    local Valid = false\r\n    local Distance = (Target.AimPointPosition - Pos).magnitude\r\n    local PredictedPosition = Target.AimPointPosition\r\n    local InterceptionTime = Distance/Vel\r\n    local PredictedPositionLast = Target.AimPointPosition + Target.AimPointPosition.normalized * (Accuracy+1)\r\n    local Iterations = 0\r\n    local Vy\r\n    \r\n    while (PredictedPosition - PredictedPositionLast).magnitude > Accuracy and Iterations < MaxIterationSteps do\r\n        Iterations = Iterations + 1\r\n        PredictedPositionLast = PredictedPosition\r\n        PredictedPosition = Target.AimPointPosition + Target.Velocity * InterceptionTime + Target.Acceleration * InterceptionTime^2 / 2\r\n        local Dy = PredictedPosition.y - Pos.y\r\n        -- Dy = Vy*t + g*t^2 /2\r\n        if Mass == 0 then\r\n            Vy = Dy/InterceptionTime\r\n        else\r\n            Vy = Dy/InterceptionTime - I:GetGravityForAltitude(Pos.y + Dy/2).y*InterceptionTime / 2\r\n        end\r\n        local Vxz = math.sqrt(Vel^2 - Vy^2)\r\n        --Distance = (PredictedPosition - Pos).magnitude\r\n        DistanceXz = Vector3(PredictedPosition.x - Pos.x, 0, PredictedPosition.z - Pos.z).magnitude\r\n        if Mass == 0 then\r\n            InterceptionTime = DistanceXz/Vxz\r\n        else\r\n            InterceptionTime = DistanceXz/(Vxz - (Drag/Mass * InterceptionTime^2 / 2))\r\n        end\r\n        MyLog(I,SYSTEM,\"SYSTEM:   Iteration: \"..Iterations..\"   PredictedPosition: \"..tostring(PredictedPosition)..\"   InterceptionTime: \"..InterceptionTime..\"   Vxz: \"..Vxz)\r\n        if Vel^2 < Vy^2 then\r\n            Valid = false\r\n            return {Valid = Valid}\r\n        end\r\n    end\r\n\r\n    local Elevation = math.asin(Vy/Vel) * 180/math.pi\r\n    local a = (Vector3(PredictedPosition.x,0,PredictedPosition.z) - Vector3(Pos.x,0,Pos.z)).normalized\r\n    local AimingDirection = Quaternion.AngleAxis(Elevation, Vector3.Cross(a,Vector3.up).normalized) * a\r\n    if AimingDirection ~= nil then\r\n        Valid = true\r\n    end\r\n    MyLog(I,SYSTEM,\"SYSTEM:   AimingDirection: \"..tostring(AimingDirection))\r\n    return {AimingDirection = AimingDirection, InterceptionPoint = PredictedPosition, InterceptionTime = InterceptionTime, Elevation = Elevation, Valid = Valid}\r\n\r\nend\r\n\r\n\r\n-- creates WeaponGroups == {} which contains a {} for each WeaponGroup\r\n-- a WeaponGroup has information in order to fire a group of weapons:\r\n-- BulletSpeed, WeaponSystems == {}, MainframeId\r\nfunction LuaTurretsInit(I)\r\n    LuaTurretsInitDone = true\r\n    TargetInfos = {} -- used for BetterTargetInfo()\r\n    WeaponGroups = {}\r\n    for WeaponGroupId, WeaponGroupInfo in pairs(WeaponGroupsSetting) do\r\n        local WeaponGroup = {}\r\n        local ControllingAiName = WeaponGroupInfo[1]\r\n        WeaponGroup.BulletSpeed = WeaponGroupInfo[2]\r\n        WeaponGroup.Mass = WeaponGroupInfo[3]\r\n        WeaponGroup.Drag = WeaponGroupInfo[4]\r\n        WeaponGroup.WeaponName = WeaponGroupInfo[5]\r\n        WeaponGroup.Rpm = WeaponGroupInfo[7]\r\n        WeaponGroup.PlanarAccelerationOnly = WeaponGroupInfo[6]\r\n\r\n        WeaponGroup.AnimationSetting = {}\r\n        for _, AnimationSetting in pairs(AnimationSettings) do\r\n            if AnimationSetting[1] == WeaponGroupInfo[8] then\r\n                WeaponGroup.AnimationSetting = AnimationSetting\r\n                break\r\n            end\r\n        end\r\n\r\n        WeaponGroup.WeaponSystems = CreateWeaponList(I,WeaponGroup)\r\n        if #WeaponGroup.WeaponSystems < 1 then\r\n            MyLog(I,WARNING,\"WARNING:   no turrets found named \\\"\"..WeaponGroup.WeaponName..\"\\\"\")\r\n        else\r\n            MyLog(I,SUCCESS,\"SUCCESS:   found \"..#WeaponGroup.WeaponSystems..\" WeaponSystems named \\\"\"..WeaponGroup.WeaponName..\"\\\"\")\r\n        end\r\n\r\n        -- iterating ai mainframes\r\n        local matched = false\r\n        for index=0 ,I:Component_GetCount(26)-1 do -------------------------------------------------------------------------------------------------- not sure about indexing\r\n            if I:Component_GetBlockInfo(26,index).CustomName == ControllingAiName then\r\n                matched = true\r\n                WeaponGroup.MainframeId = index\r\n                break\r\n            end\r\n        end\r\n        if matched then\r\n            WeaponGroups[WeaponGroupId] = WeaponGroup\r\n        else\r\n            MyLog(I,WARNING,\"WARNING:   Turrets named \\\"\"..WeaponGroup.WeaponName..\"\\\" no AI named \\\"\"..ControllingAiName..\"\\\" found\")\r\n        end\r\n    end\r\n    if NilListLenght(WeaponGroups) < 1 then \r\n        LuaTurretsInitDone = false\r\n        MyLog(I,WARNING,\"WARNING:   Could not load any WeaponGroup\")\r\n    end\r\nend\r\n\r\n\r\n\r\n-- aims and fires WeaponGroups\r\nfunction LuaTurretsUpdate(I)\r\n    if LuaTurretsInitDone ~= true then\r\n        LuaTurretsInit(I)\r\n        if LuaTurretsInitDone == true then MyLog(I,SUCCESS,\"SUCCESS:   LuaTurretsInit() done\") end\r\n    else\r\n        for WeaponGroupIndex, WeaponGroup in pairs(WeaponGroups) do\r\n            local mainframeIndex = WeaponGroup.MainframeId\r\n            local WeaponSystems = WeaponGroup.WeaponSystems\r\n            local BulletSpeed = WeaponGroup.BulletSpeed\r\n            local Mass = WeaponGroup.Mass\r\n            local Drag = WeaponGroup.Drag\r\n            if I:GetAIFiringMode(mainframeIndex) == \"On\" then\r\n                local TargetInfo = I:GetTargetInfo(mainframeIndex, 0)\r\n                if TargetInfo.Valid then\r\n                    for WeaponSystemIndex, WeaponSystem in pairs(WeaponSystems) do\r\n                        local Target = BetterTargetInfo(I, mainframeIndex, 0, WeaponGroup.PlanarAccelerationOnly)\r\n                        local SubConstructIdentifier = WeaponSystem.SubConstructIdentifier\r\n                        local weaponIndex = WeaponSystem.weaponIndex\r\n                        local Pos = I:GetWeaponInfo(weaponIndex).GlobalFirePoint\r\n                        local Vel = BulletSpeed\r\n                        local MaxIterationSteps = 20\r\n                        local Accuracy = 0.01\r\n                        local Prediction = TargetPrediction(I,Target,Pos,Vel,Mass,Drag,MaxIterationSteps,Accuracy)\r\n                        local aim = Prediction.AimingDirection\r\n                        local fired = false\r\n                        if Prediction.Valid then\r\n                            I:AimWeaponInDirection(weaponIndex, aim.x,aim.y,aim.z, 0)\r\n                              -- checks if aim and CurrentDirection are parallel\r\n                            if 1 - Vector3.Dot(I:GetWeaponInfo(weaponIndex).CurrentDirection, aim.normalized) < 0.01 then\r\n                                if WeaponGroup.Rpm ~= nil then\r\n                                    if WeaponSystem.FiredLast + 60/WeaponGroup.Rpm < I:GetTime() then\r\n                                        I:FireWeapon(weaponIndex, 0) ; fired = true\r\n                                        WeaponSystems[WeaponSystemIndex].FiredLast = I:GetTime()\r\n                                    end\r\n                                else\r\n                                    I:FireWeapon(weaponIndex, 0) ; fired = true\r\n                                end\r\n                            end\r\n                        end\r\n                        WeaponGroups[WeaponGroupIndex].WeaponSystems[WeaponSystemIndex].Animation = LuaTurretsAnimations(I, WeaponSystem.Animation, fired)\r\n                    end\r\n                end\r\n            else\r\n                -- keep updating animations\r\n                for WeaponSystemIndex, WeaponSystem in pairs(WeaponSystems) do\r\n                    WeaponGroups[WeaponGroupIndex].WeaponSystems[WeaponSystemIndex].Animation = LuaTurretsAnimations(I, WeaponSystem.Animation, false)\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n\r\n\r\n-- calls the correct animation\r\nfunction LuaTurretsAnimations(I, Animation, fired)\r\n    if Animation.Type == \"recoil\" then\r\n        Animation = Recoil(I,Animation,fired)\r\n    end\r\n    return Animation\r\nend\r\n\r\n-- init for Recoil()\r\nfunction RecoilInit(I, TurretIdentifier, WeaponGroup, AnimationSetting)\r\n    for _, SpinnerIdentifier in pairs(FindAllSubconstructs(I, AnimationSetting[5])) do\r\n        local Parent = I:GetParent(I:GetParent(I:GetParent(SpinnerIdentifier)))\r\n        if TurretIdentifier == Parent then\r\n            local Spinner_1 = I:GetParent(I:GetParent(SpinnerIdentifier))\r\n            local Spinner_2 = I:GetParent(SpinnerIdentifier)\r\n            local Spinner_3 = SpinnerIdentifier\r\n            local Valid = (Spinner_1 ~= nil and Spinner_1 ~= -1)\r\n            MyLog(I,SUCCESS,\"SUCCESS:   loaded recoil animation for turret \"..TurretIdentifier..\" named \"..WeaponGroup.WeaponName)\r\n            return {Spinner         = { S1 = Spinner_1,S2 = Spinner_2, S3 = Spinner_3},\r\n                    Rpm             = WeaponGroup.Rpm,\r\n                    ActivatedLast   = 0,\r\n                    Valid           = Valid,\r\n                    Type            = AnimationSetting[2],\r\n                    AngleMax        = AnimationSetting[3],\r\n                    Fraction        = AnimationSetting[4],\r\n                    Resting         = AnimationSetting[6]\r\n                }\r\n        end\r\n    end\r\n    MyLog(I,WARNING,\"WARNING:   Turret with ID \"..TurretIdentifier..\" has no working recoil animation, check spinner names\")\r\n    return {Valid = false}\r\nend\r\n\r\n-- one of possible many different animations\r\nfunction Recoil(I,Animation,fired)\r\n    local Rpm = Animation.Rpm\r\n    local Spinner = Animation.Spinner\r\n    local AngleMax = Animation.AngleMax \r\n    local Fraction = Animation.Fraction\r\n    local Resting = Animation.Resting\r\n    \r\n    local T = 60/Animation.Rpm\r\n    local back = T/Fraction -- time the absorber takes to move back\r\n    local resting = (T-back) * Resting\r\n    if fired then\r\n        Animation.ActivatedLast = I:GetTime()\r\n    end\r\n    local Dt = I:GetTime() - Animation.ActivatedLast\r\n    local Angle\r\n    if Dt < back then\r\n        Angle = Dt / back * AngleMax\r\n    elseif Dt < T-resting then\r\n        Angle = AngleMax * (1-((Dt-back)/(T-back-resting)))\r\n    else\r\n        Angle = 0\r\n    end\r\n    I:SetSpinBlockRotationAngle(Spinner.S1, -Angle)\r\n    I:SetSpinBlockRotationAngle(Spinner.S2, Angle*2)\r\n    I:SetSpinBlockRotationAngle(Spinner.S3, -Angle)\r\n\r\n    return Animation\r\nend\r\n\r\n\r\n\r\n-- keeps track of acceleration\r\nfunction BetterTargetInfo(I, AiIndex, Prio, PlanarAccelerationOnly)\r\n    -- TargetInfos = {} init in LuaTurretsInit()\r\n    local MeanOverN = AccAvTime * 40\r\n    local TargetInfo = I:GetTargetInfo(AiIndex, Prio)\r\n    if TargetInfos[AiIndex] == nil then TargetInfos[AiIndex] = {} end\r\n    if TargetInfos[AiIndex][Prio] == nil then TargetInfos[AiIndex][Prio] = {} end\r\n    if TargetInfos[AiIndex][Prio].lastAccelerationValues == nil then TargetInfos[AiIndex][Prio].lastAccelerationValues = {} end\r\n    if TargetInfos[AiIndex][Prio].LastUpdate == nil then TargetInfos[AiIndex][Prio].LastUpdate = I:GetTime() - 1/40 end\r\n    if TargetInfo.Valid then\r\n        if I:GetTime() ~= TargetInfos[AiIndex][Prio].LastUpdate then\r\n            if TargetInfos[AiIndex][Prio].Velocity == nil then\r\n                TargetInfos[AiIndex][Prio].Velocity = TargetInfo.Velocity\r\n            end\r\n            local Acceleration = (TargetInfo.Velocity - TargetInfos[AiIndex][Prio].Velocity) / (I:GetTime() - TargetInfos[AiIndex][Prio].LastUpdate)\r\n            if PlanarAccelerationOnly then\r\n                Acceleration.y = 0\r\n            end\r\n            -- Add the current value of 'a' to the end of the table\r\n            table.insert(TargetInfos[AiIndex][Prio].lastAccelerationValues, Acceleration)\r\n            -- If the table has more than MeanOverN elements, remove the oldest element (at position 1, moves all elements down by 1)\r\n            if #TargetInfos[AiIndex][Prio].lastAccelerationValues > MeanOverN then\r\n                table.remove(TargetInfos[AiIndex][Prio].lastAccelerationValues, 1)\r\n            end\r\n            TargetInfos[AiIndex][Prio].Acceleration = calculateMean(TargetInfos[AiIndex][Prio].lastAccelerationValues)\r\n            TargetInfos[AiIndex][Prio].Velocity = TargetInfo.Velocity\r\n            TargetInfos[AiIndex][Prio].Position = TargetInfo.Position\r\n            TargetInfos[AiIndex][Prio].AimPointPosition = TargetInfo.AimPointPosition\r\n            TargetInfos[AiIndex][Prio].LastUpdate = I:GetTime()\r\n        end\r\n        return TargetInfos[AiIndex][Prio]\r\n    else\r\n        TargetInfos[AiIndex][Prio] = nil\r\n        return  {\r\n                Acceleration = Vector3(0,0,0),\r\n                Velocity = Vector3(0,0,0),\r\n                Position = Vector3(0,0,0),\r\n                AimPointPosition = Vector3(0,0,0)\r\n                }\r\n    end\r\nend\r\n\r\n\r\n\r\nfunction Update(I)\r\n    if DebugLevel > SUCCESS then I:ClearLogs() end\r\n    LuaTurretsUpdate(I)\r\nend ","\r\n\r\n-- encodes characters into numbers in space ]0,1[\r\nfunction Encoder(symbol)\r\n\r\n    -- math eval.txt contains the decoder informations for a math eval component in the bb\r\n    -- those are the encoder informations:\r\n    local Symbols = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\" \",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\".\"}\r\n    for i = 1, #Symbols do\r\n        if symbol == Symbols[i] then return i/100 end\r\n    end\r\n    return 0\r\nend\r\n\r\n\r\n-- this is a class\r\n-- it creates a object\r\n-- the object sends characters to a breadboard\r\n-- the breadboard sums all characters up and sends them to any component (like signs)\r\n-- we do this because LUA can not interact with string arguments of any blocks, but the bb can!\r\nTickThreshold = 1\r\nfunction channel_(axisname, tick_clamp_max) \r\n    local channel = {\r\n        axisname = axisname,  -- custom axisname used to send the signal\r\n        string = \"\",        -- what we send\r\n        ticks_since_last_action = 0,   -- last time we send a symbol, used to control the speed at which characters are being send\r\n        position = 0            -- position of last symbol we send\r\n    }\r\n        function channel:SendString(string)\r\n            self.string = string -- sets a new string\r\n            self.position = 0\r\n        end\r\n        -- needs to be executed each tick to update the object and \r\n        function channel:Run(I)\r\n            if self.ticks_since_last_action <= tick_clamp_max then\r\n                self.ticks_since_last_action = self.ticks_since_last_action + 1\r\n            end\r\n            if self.position < #self.string and TickThreshold <= self.ticks_since_last_action then\r\n                self.ticks_since_last_action = 0\r\n                self.position = self.position + 1\r\n                local EncodedSymbol = Encoder(string.sub(self.string, self.position, self.position))\r\n                I:Log(\"axisname: \"..self.axisname..\"  EncodedSymbol: \"..tostring(EncodedSymbol)..\"  symbol: \"..string.sub(self.string, self.position, self.position))\r\n                I:RequestCustomAxis(self.axisname,EncodedSymbol)\r\n            end\r\n        end\r\n        function channel:Reset(I)\r\n            self.ticks_since_last_action = -1\r\n            self.timestamp = I:GetTime()\r\n            I:RequestCustomAxis(self.axisname,-1)\r\n        end\r\n    return channel\r\nend\r\n\r\n\r\nfunction Update(I)\r\n    ShowTime(I)\r\nend\r\n\r\n\r\nfunction time_(update_every_ticks)\r\n    local Time = channel_(\"1\",update_every_ticks)\r\n    Time.update_every_ticks = update_every_ticks\r\n    Time.ticks_since_last_timeprint = 0\r\n    function Time:GameTime(I)\r\n        self.ticks_since_last_timeprint = self.ticks_since_last_timeprint + 1\r\n        if self.ticks_since_last_timeprint >= self.update_every_ticks then\r\n            self.ticks_since_last_timeprint = 0\r\n            Time:Reset(I)\r\n            Time:SendString(tostring(I:GetTime()))\r\n        end\r\n    end\r\n    return Time\r\nend\r\n\r\n\r\nfunction ShowTime(I)\r\n    if Time == nil then\r\n        Time = time_(10)\r\n    else\r\n        Time:GameTime(I)\r\n        Time:Run(I)\r\n    end\r\nend","-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n---Enumerations for Logging purposes\r\nERROR = 0\r\nWARNING = 1\r\nSYSTEM = 2\r\nLISTS = 3\r\nVECTORS = 4\r\nDebugLevel = SYSTEM\r\n-- I marked lines where I need to add more code. with \"#EDITHERE\"\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n\r\n--------------\r\n-- Settings --\r\n--------------\r\n\r\n-- chapters --\r\n-- 1. guidance groups\r\n-- 2. missile behaviours\r\n-- 3. prediction guidance\r\n\r\n\r\n-- guidance groups --\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-- I have already created 2 different guidance groups.\r\n-- You can give luanchers one of the names from \"LaunchpadName\" \r\n-- and they will be controlled by the Ai named like the \"ControllingAiName\" says\r\n-- and they will behave like \"MissileBehaviourName\" says.\r\n-- You can tell a GuidanceGroup to use the APN prediction. \r\n-- You can remove or add groups.\r\n-- You can change the settings of a group, which are:\r\n-- 1. LaunchpadName\r\n-- 2. ControllingAiName\r\n-- 3. MissileBehaviourName\r\n-- 4. Prediction: possible otions: \"Apn\"\r\n\r\n--                   LaunchpadName    ControllingAiName    MissileBehaviourName     Prediction\r\nGuidanceGroups =  { {\"missiles 01\",   \"missile ai 01\",     \"Diving01\",                      },\r\n                    {\"missiles 02\",   \"missile ai 01\",     \"Streight01\",            \"APN\"   }\r\n                    }\r\n\r\n\r\n\r\n-- missile behaviours --\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n\r\n-- Here you can define different behaviours for missiles.\r\n-- You can then tell a missile group, what behaviour to use.\r\n-- To do so, just match \"FlightBehaviourName\" and \"MissileBehaviourName\" and\r\n-- the GuiadanceGroup will know what MissileBehaviour to use\r\n\r\n-- There are multiple BehaviourPattern to choose from. They each require different settings.\r\n-- Here is a list of behaviours I implemented:\r\n\r\n-- 1.\r\n-- BehaviourPatternName: \"Diving\"\r\n-- This BehaviourPattern has 3 options:\r\n-- 1. FlightBehaviourName: A GuiadanceGroup with this MissileBehaviourName will use this BehaviourPattern.\r\n-- 2. CruisingAltitude: The cruising altitude the missile will stay at, bevore diving on the enemy\r\n-- 3. DivingRadius: The distance to the enemy (no respect to altitude difference) below which we dive.\r\n\r\n-- 2.\r\n-- BehaviourPatternName: \"Bombing\"\r\n-- This BehaviourPattern has 3 options:\r\n-- 1. FlightBehaviourName: A GuiadanceGroup with this MissileBehaviourName will use this BehaviourPattern.\r\n-- 2. AimPointUpShift: We aim above the actual aimpoint, to drop the bomb on top of the enemie.\r\n-- 3. DivingRadius: Thats the distance below we stop aiming above the actual aimpoint and try to strike.\r\n\r\n--3.\r\n-- BehaviourPatternName: \"CustomCurve\"\r\n-- not done yet\r\n\r\n--4.\r\n-- BehaviourPatternName: \"Orbit\"\r\n-- This BehaviourPattern has 6 options:\r\n-- 1. Radius: the radius if the orbit\r\n-- 2. HightOffset: relative altitude to the target\r\n-- 3. MaxHight: highest allowed altitude\r\n-- 4. MinHight: lowest allowed altitude\r\n-- 5. WhiggleRadius: additional rotation to irretate enemy counter measurements\r\n-- 6. T: time for one rotation of the whiggle motion\r\n\r\n--                  BehaviourPattern    FlightBehaviourName   CruisingAltitude   DivingRadius     (#unfinished)\r\nMissileBehaviours = { {\"Diving\",       \"Diving01\",            200,               500         }, -- flies on CruisingAltitude till being within DivingRadius, when it strickes down on enemy\r\n\r\n--                  BehaviourPattern    FlightBehaviourName   AimPointUpShift    DivingRadius\r\n                      {\"Bombing\",      \"Bombing01\",           30,                20          },\r\n\r\n--                  BehaviourPattern    FlightBehaviourName     Radius      HightOffset     MaxHight    MinHight    WhiggleRadius   T\r\n                      {\"Orbit\",        \"Orbit01\",               200,        50,             600,        15,         5,              2},\r\n\r\n--                  BehaviourPattern    FlightBehaviourName\r\n                      {\"Streight\",      \"Streight01\"}\r\n                    }\r\n\r\n\r\n\r\n-- prediction guidance --\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n\r\n-- not done yet but available\r\n\r\n\r\n\r\n\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-- here comes my code --\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-----------------------------------------------------------------------------------------\r\n-- This function is called each game tick by the game engine\r\n-- The object named \"I\" contains a bunch of data related to the game\r\nfunction Update(I)\r\n    GeneralGuidance(I)\r\nend\r\n\r\n\r\n\r\n-- This is the main function organising my functions\r\nfunction GeneralGuidance(I)\r\n    if GeneralGuidanceInitDone ~= true then\r\n        GeneralGuidanceInit(I)\r\n    else\r\n        GeneralGuidanceUpdate(I)\r\n    end\r\nend\r\n\r\n\r\n\r\n-- This is what controls the launchpads\r\nfunction GeneralGuidanceUpdate(I)\r\n    -- iterates GuidanceGroups\r\n    for GuidanceGroupId, GuidanceGroupData in pairs(GuidanceGroups) do\r\n        if GuidanceGroupData.Valid then\r\n            local MissileBehaviour = MissileBehaviours[GuidanceGroupData.MissileBehaviourId]\r\n            local TargetInfo = I:GetTargetInfo(GuidanceGroupData.MainframeId, 0)\r\n            local AimPointPosition = TargetInfo.AimPointPosition\r\n            local BehaviourPattern = MissileBehaviour[1]\r\n            local GameTime = I:GetGameTime()\r\n\r\n            -- iterates launchpads\r\n            for key, luaTransceiverIndex in pairs(GuidanceGroupData.luaTransceiverIndexes) do\r\n                -- iterates missiles\r\n                for missileIndex=0 , I:GetLuaControlledMissileCount(luaTransceiverIndex)-1 do\r\n                    local matched = false\r\n                    if MissileData[luaTransceiverIndex+1] == nil then MissileData[luaTransceiverIndex+1] = {} end\r\n                    if MissileData[luaTransceiverIndex+1][missileIndex+1] == nil then MissileData[luaTransceiverIndex+1][missileIndex+1] = {} end\r\n\r\n                    -- if the GuidanceGroup has a prediction routine enabled, the AimPointPosition will be adjusted\r\n                    local AimPoint = AimPointPosition\r\n                    if GuidanceGroupData[4] == \"APN\" then\r\n                        AimPoint = ApnGuidance(I,TargetInfo,AimPointPosition,luaTransceiverIndex,missileIndex)\r\n                    end\r\n\r\n                    -- here the correct MissileControl function is selected\r\n                    if      BehaviourPattern == \"Streight\"      then MissileControlStreight(I,luaTransceiverIndex,missileIndex,MissileBehaviour,AimPoint); matched = true\r\n                    elseif  BehaviourPattern == \"Diving\"        then MissileControlDiving(I,luaTransceiverIndex,missileIndex,MissileBehaviour,AimPoint); matched = true\r\n                    elseif  BehaviourPattern == \"CustomCurve\"   then MissileControlCustomCurve(I,luaTransceiverIndex,missileIndex,MissileBehaviour,AimPoint); matched = true\r\n                    elseif  BehaviourPattern == \"Bombing\"       then MissileControlBomb(I,luaTransceiverIndex,missileIndex,MissileBehaviour,AimPoint); matched = true\r\n                    elseif  BehaviourPattern == \"Orbit\"         then MissileControlOrbit(I,luaTransceiverIndex,missileIndex,MissileBehaviour,AimPoint); matched = true\r\n                    end\r\n                    -- more behaviours to come #EDITHERE\r\n\r\n                    if not matched then MyLog(I,WARNING,\"WARNING:  GuidanceGroup with LaunchpadName \".. GuidanceGroupData[1].. \" has no working MissileBehaviour!\") end\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n\r\n\r\n-- creates lists of all the launchpads Ids so addressing them is optimised\r\n-- finds Ids of controlling ai mainframes\r\n-- finds Id of MissileBehaviour\r\nfunction GeneralGuidanceInit(I)\r\n    I:ClearLogs()\r\n    MyLog(I,SYSTEM,\"Running GeneralGuidanceInit\")\r\n    GeneralGuidanceInitDone = false\r\n    local ErrorDetected = false\r\n\r\n    -- a list containing a set of data for each missile\r\n    MissileData = {}\r\n\r\n    -- iterates GuidanceGroups\r\n    local LuaTransceiverCount = I:GetLuaTransceiverCount()\r\n    for GuidanceGroupId, GuidanceGroupData in pairs(GuidanceGroups) do\r\n        local LaunchpadName = GuidanceGroupData[1]\r\n        local ControllingAiName = GuidanceGroupData[2]\r\n        local MissileBehaviourName = GuidanceGroupData[3]\r\n\r\n        local GuidanceGroupIsSetUpCorrect = true\r\n\r\n        -- finds all the launchpads Ids\r\n        local LaunchpadIds = {}\r\n        for luaTransceiverIndex=0 , LuaTransceiverCount-1 do\r\n            local LuaTransceiverInfo = I:GetLuaTransceiverInfo(luaTransceiverIndex)\r\n            if LuaTransceiverInfo.CustomName == LaunchpadName then\r\n                table.insert(LaunchpadIds,luaTransceiverIndex)\r\n            end\r\n        end\r\n        GuidanceGroups[GuidanceGroupId].luaTransceiverIndexes = LaunchpadIds\r\n        if #LaunchpadIds == 0 then MyLog(I,WARNING,\"WARNING:  GuidanceGroup with LaunchpadName \"..LaunchpadName.. \" has no assigned launchpads!\"); GuidanceGroupIsSetUpCorrect = false end\r\n\r\n        -- iterating ai mainframes\r\n        for index=0 ,I:Component_GetCount(26)-1 do -------------------------------------------------------------------------------------------------- not sure about indexing\r\n            if I:Component_GetBlockInfo(26,index).CustomName == ControllingAiName then\r\n                GuidanceGroups[GuidanceGroupId].MainframeId = index\r\n            end\r\n        end\r\n        if GuidanceGroups[GuidanceGroupId].MainframeId == nil then MyLog(I,WARNING,\"WARNING:  GuiadanceGroup with LaunchpadName \"..LaunchpadName.. \" has no assigned ai mainframe!\"); GuidanceGroupIsSetUpCorrect = false end\r\n\r\n        -- iterating MissileBehaviours\r\n        for MissileBehaviourId, MissileBehaviour in pairs(MissileBehaviours) do\r\n            -- checks if the MissileGuidance group can find a MissileBehaviour\r\n            if MissileBehaviourName == MissileBehaviour[2] then\r\n                GuidanceGroups[GuidanceGroupId].MissileBehaviourId = MissileBehaviourId\r\n            end\r\n        end\r\n        if GuidanceGroups[GuidanceGroupId].MissileBehaviourId == nil then MyLog(I,WARNING,\"WARNING:  GuiadanceGroup with LaunchpadName \"..LaunchpadName.. \" has no configurated MissileBehaviour!\"); GuidanceGroupIsSetUpCorrect = false end\r\n        \r\n\r\n        GuidanceGroups[GuidanceGroupId].Valid = GuidanceGroupIsSetUpCorrect\r\n    end\r\n\r\n    if ErrorDetected == false then\r\n        GeneralGuidanceInitDone = true\r\n    else\r\n        MyLog(I,SYSTEM,\"GeneralGuidanceInit failed\")\r\n    end\r\nend\r\n\r\n\r\n\r\nfunction MissileControlStreight(I,lti,mi,MissileBehaviour,AimPointPosition)\r\n    local  aimPoint = AimPointPosition\r\n    I:SetLuaControlledMissileAimPoint(lti,mi,aimPoint.x,aimPoint.y,aimPoint.z)\r\nend\r\n\r\n\r\n\r\n-- guides missiles along waypoints\r\n-- lti = luaTransceiverIndex | mi = missileIndex\r\nfunction MissileControlDiving(I,lti,mi,MissileBehaviour,AimPointPosition)\r\n\r\n\r\n    local MissileInfo = I:GetLuaControlledMissileInfo(lti,mi)\r\n    local CruisingAltitude = MissileBehaviour[3]\r\n    local DivingRadius = MissileBehaviour[4]\r\n\r\n    local TimeSinceLaunch = MissileInfo.TimeSinceLaunch\r\n    local Position = MissileInfo.Position\r\n\r\n    -- resets MissileData for a new missile\r\n    if TimeSinceLaunch < 0.1 then\r\n        MissileData[lti+1][mi+1] = {}\r\n    else\r\n        if Position.y > CruisingAltitude then\r\n            MissileData[lti+1][mi+1].Waypoint01 = true -- vertical launch done\r\n        end\r\n\r\n        if (AimPointPosition - Vector3(Position.x,AimPointPosition.y,Position.z)).magnitude < DivingRadius then\r\n            MissileData[lti+1][mi+1].Waypoint02 = true -- cruising done\r\n        end\r\n\r\n        if MissileData[lti+1][mi+1].Waypoint01 ~= true then\r\n            aimPoint = Position + Vector3(0,10,0)\r\n\r\n        elseif MissileData[lti+1][mi+1].Waypoint02 ~= true then\r\n            aimPoint = Vector3  (AimPointPosition.x,CruisingAltitude,AimPointPosition.z)\r\n        else\r\n            aimPoint = AimPointPosition\r\n        end\r\n        I:SetLuaControlledMissileAimPoint(lti,mi,aimPoint.x,aimPoint.y,aimPoint.z)\r\n    end\r\nend\r\n\r\n\r\n-- #EDITHERE\r\n-- not done yet\r\nfunction MissileControlCustomCurve(I,lti,mi,MissileBehaviour,AimPointPosition)\r\n    local MissileInfo = I:GetLuaControlledMissileInfo(lti,mi)\r\n    local TimeSinceLaunch = MissileInfo.TimeSinceLaunch\r\n    local Position = MissileInfo.Position\r\n\r\n    local m_apt_Vector = AimPointPosition - Position\r\n    local m_apt_Distance = m_apt_Vector.magnitude\r\n    local m_apt_PlaneVector = Vector3(AimPointPosition.x,0,AimPointPosition.z) - Vector3(Position.x,0,Position.z)\r\n    local m_apt_PlaneDistance = m_apt_PlaneVector.magnitude\r\n    local m_apt_Elevation = math.acos(m_apt_PlaneDistance / m_apt_Distance)\r\n\r\n\r\n    -- resets MissileData for a new missile\r\n    if TimeSinceLaunch < 0.1 then\r\n        MissileData[lti+1][mi+1] = {}\r\n        MissileData[lti+1][mi+1].LaunchPosition = Position\r\n        MissileData[lti+1][mi+1].m_apt_InitialPlaneDistance = m_apt_PlaneDistance\r\n    else\r\n        local x = MissileData[lti+1][mi+1].m_apt_InitialPlaneDistance /2\r\n        local height = AimPointPosition.y + 0\r\n    end\r\nend\r\n\r\n\r\n\r\n-- lets missiles with no propulsion glide onto the enemie\r\n-- lti = luaTransceiverIndex | mi = missileIndex\r\nfunction MissileControlBomb(I,lti,mi,MissileBehaviour,AimPointPosition)\r\n    local MissileInfo = I:GetLuaControlledMissileInfo(lti,mi)\r\n    local TimeSinceLaunch = MissileInfo.TimeSinceLaunch\r\n    local Position = MissileInfo.Position\r\n\r\n    local SettingA = 0.8 -- not to sure about this setting yet\r\n    local DivingRadius = MissileBehaviour[4]\r\n    local AimPointUpShift = Vector3(0,MissileBehaviour[3],0)\r\n\r\n    local aimPoint = AimPointPosition + AimPointUpShift\r\n    local m_apt_Vector = AimPointPosition - Position\r\n    local ClosingVelocityXZ\r\n\r\n    local m_apt_PlaneVector = Vector3(AimPointPosition.x,0,AimPointPosition.z) - Vector3(Position.x,0,Position.z)\r\n    local alpha = -math.atan2(m_apt_Vector.y,m_apt_PlaneVector.magnitude)\r\n    if m_apt_PlaneVector.magnitude < DivingRadius then\r\n        aimPoint = AimPointPosition\r\n    -- if we are already above the enemy, we can just dive \r\n    elseif alpha > math.pi/3 then -- == 60 degrees \r\n        aimPoint = AimPointPosition + AimPointUpShift\r\n    else\r\n        -- calculates at what rate we are getting closer to the enemie, so we can adjust the diving angle\r\n        if MissileData[lti+1][mi+1].m_apt_VectorLast ~= nil then\r\n            --ClosingVelocity = (m_apt_Vector - MissileData[lti+1][mi+1].m_apt_VectorLast) / (TimeSinceLaunch - MissileData[lti+1][mi+1].TimeSinceLaunchLast)\r\n            local VectorA = Vector3(m_apt_Vector.x,0,(m_apt_Vector.z))\r\n            VectorB = Vector3(MissileData[lti+1][mi+1].m_apt_VectorLast.x,0,MissileData[lti+1][mi+1].m_apt_VectorLast.z)\r\n            ClosingVelocityXZ = (VectorA - VectorB) / (TimeSinceLaunch - MissileData[lti+1][mi+1].TimeSinceLaunchLast)\r\n\r\n            -- if we fall faster than we get closer in XZ, we miss the target, so we slow the falling rate by aiming up\r\n            if math.abs(MissileInfo.Velocity.y) > ClosingVelocityXZ.magnitude * SettingA then\r\n                aimPoint = Vector3(AimPointPosition.x,MissileInfo.Position.y + m_apt_PlaneVector.magnitude,AimPointPosition.z)\r\n            end\r\n        end\r\n    end\r\n    -- resets MissileData for a new missile\r\n    if TimeSinceLaunch < 0.1 then\r\n        MissileData[lti+1][mi+1] = {}\r\n    else\r\n        MissileData[lti+1][mi+1].m_apt_VectorLast = m_apt_Vector\r\n        MissileData[lti+1][mi+1].TimeSinceLaunchLast = TimeSinceLaunch\r\n    end\r\n\r\n    I:SetLuaControlledMissileAimPoint(lti,mi,aimPoint.x,aimPoint.y,aimPoint.z)\r\nend\r\n\r\n\r\n-- lets missliles orbit around the AimPointPosition\r\nfunction MissileControlOrbit(I,lti,mi,MissileBehaviour,AimPointPosition)\r\n    local Radius = MissileBehaviour[3]\r\n    local HightOffset = MissileBehaviour[4]\r\n    local MaxHight = MissileBehaviour[5]\r\n    local MinHight = MissileBehaviour[6]\r\n    local WhiggleRadius = MissileBehaviour[7]\r\n    local T = MissileBehaviour[8]\r\n    local MissileInfo = I:GetLuaControlledMissileInfo(lti,mi)\r\n    local Position = MissileInfo.Position\r\n    local alpha = math.atan2(AimPointPosition.x - Position.x, AimPointPosition.z - Position.z) * 180/math.pi + 10\r\n    local r =  Quaternion.AngleAxis(alpha, Vector3.up) * -Vector3.forward\r\n\r\n    local WhiggleAxis = Vector3(-r.z,0,r.x).normalized\r\n    local Whiggle = Quaternion.AngleAxis(I:GetTime() * 360 / T, WhiggleAxis) * Vector3.up * WhiggleRadius\r\n\r\n    local aimPoint = AimPointPosition + r * Radius + Vector3(0,HightOffset,0) + Whiggle\r\n    if aimPoint.y > MaxHight then aimPoint.y = MaxHight end\r\n    if aimPoint.y < MinHight then aimPoint.y = MinHight end\r\n    I:SetLuaControlledMissileAimPoint(lti,mi,aimPoint.x,aimPoint.y,aimPoint.z)\r\nend\r\n\r\n\r\n\r\n\r\nfunction ApnGuidance(I,TargetInfo,AimPointPosition,luaTransceiverIndex,missileIndex)\r\n    local MissileInfo = I:GetLuaControlledMissileInfo(luaTransceiverIndex,missileIndex)\r\n    local TargetPosition = AimPointPosition\r\n    local MissilePosition = MissileInfo.Position\r\n    local TargetVelocity = TargetInfo.Velocity\r\n    local MissileVelocity = MissileInfo.Velocity\r\n\r\n    if MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo == nil then\r\n        MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo = {\r\n            TickTimeLast = I:GetGameTime() - 1/40,\r\n            AimPointLast = TargetPosition;\r\n            Locked = false\r\n        }\r\n    end\r\n\r\n    local V = TargetVelocity - MissileVelocity\r\n    local R = TargetPosition - MissilePosition\r\n\r\n    if not MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.Locked and Vector3.Angle(R,MissileVelocity) < 5 then\r\n        MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.Locked = true\r\n    end\r\n    if Vector3.Angle(R,MissileVelocity) > 60 then\r\n        MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.Locked = false\r\n    end\r\n\r\n    if not MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.Locked then\r\n        MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo = {\r\n            TickTimeLast = I:GetGameTime(),\r\n            AimPointLast = TargetPosition,\r\n            Locked = MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.Locked\r\n        }\r\n        return AimPointPosition\r\n    else\r\n        local N = 1\r\n        local LateralAcceleration = N * Vector3.Cross(V, Vector3.Cross(R, V)) / R.magnitude^2\r\n        local w = Vector3.Cross(MissileVelocity, LateralAcceleration) / MissileVelocity.magnitude^2\r\n        local dt = (I:GetGameTime()-MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.TickTimeLast)\r\n        local ApnVector = Quaternion.AngleAxis(w.magnitude*180/math.pi * dt, w) * MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.AimPointLast\r\n        ApnVector = MissilePosition + (ApnVector - MissilePosition).normalized * 500\r\n        MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo = {\r\n            TickTimeLast = I:GetGameTime(),\r\n            AimPointLast = ApnVector,\r\n            Locked = MissileData[luaTransceiverIndex+1][missileIndex+1].ApnInfo.Locked\r\n        }\r\n        return ApnVector\r\n    end\r\nend\r\n\r\n\r\nfunction MyLog(I,priority,message)\r\n    if priority <= DebugLevel then\r\n        I:Log(message)\r\n    end\r\nend"],"BlockStringDataIds":[841,917,1019],"GameVersion":"3.8.5.10","PersistentSubObjectIndex":190,"PersistentBlockIndex":1019,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":2629}}